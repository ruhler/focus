
env = Environment(
        tools=['ar', 'asciidoc', 'gcc', 'g++', 'link', 'textfile'],
        toolpath=['scons'],
        CPPPATH=[],
        LIBPATH=[],
        LIBS=[]
        )

Export('env')

env['CFLAGS'] = ['-ggdb']

# define the version string.
env['VERSION'] = "1.1.0"
env.MergeFlags("-DFOCUS_VERSION_STRING=\\\\\\\"%s\\\\\\\"" % env['VERSION'])

# configuration
SConscript('config')

# Use pkg-config to extend LIBS, LIBPATH, and CPPPATH lists
for req in ['libpng', 'poppler-cpp', 'freetype2', 'fontconfig', 'sdl']:
    try:
        env.ParseConfig("pkg-config --silence-errors --cflags --libs %s" % req)
    except OSError:
        pass


# PROGRAMDOC 
# Generates documentation for a program component.
#  name - the name of the component, for example "filler"
# Assumptions:
#   $name.txt is the asciidoc description of the program.
#   $name.1.txt is the asciidoc man page for the program.
def programdoc(name):
    mantxt = name + ".1.txt"
    man = name + ".1"
    env.Man(man, mantxt, ASCIIDOCFLAGS="-a 'VERSION=$VERSION'")
    env.Default(man)
    env.Install("$PREFIX/share/man/man1", man)

env['PROGRAMDOC'] = programdoc

# LIBRARYDOC
# Generates documentation for a library component.
#  name - the name of the component, for example "fonter".
#  funcs - a list of all the library functions.
#   TODO: it would be nice to infer this list from $name.docl
# Assumptions:
#   $name.txt is the asciidoc description of the library.
#   $name.docl describes all the library functions.
#   $name.docl generates $func.txt and $func.3.txt for each function where
#       $func.txt is the asciidoc description of the function
#       $func.3.txt is an asciidoc man page for the function
def librarydoc(name, funcs):
    docl = name + ".docl"
    txt = name + ".txt"
    descriptions = map(lambda x: x+".txt", funcs)
    mansources = map(lambda x: x+".3.txt", funcs)
    doclgen = descriptions + mansources
    env.Command(doclgen, ["#/src/docl.tcl", docl], "tclsh $SOURCES")
    for func in funcs:
        fman = func + ".3"
        fmantxt = func + ".3.txt"
        env.Man(fman, fmantxt, ASCIIDOCFLAGS="-a 'VERSION=$VERSION'")
        env.Default(fman)
        env.Install("$PREFIX/share/man/man3", fman)

env['LIBRARYDOC'] = librarydoc



# Build each of the components
for comp in env['COMPONENTS']:
    env['RELEASE'] = Dir('focus-%s/src/%s' % (env['VERSION'], comp))
    SConscript('src/%s/sconscript' % comp)

# Build the documentation
env['RELEASE'] = Dir('focus-%s/src' % env['VERSION'])
SConscript('src/sconscript')

env.Alias('install', '$PREFIX')


env['RELEASE'] = Dir('focus-%s' % env['VERSION'])
env.Install("$RELEASE", ['COPYING', 'makefile', 'sconscript', 'sconstruct'])
env.Install("$RELEASE", "#/doc")
release = env.Command('%s.tar.gz' % env['RELEASE'], "$RELEASE",
        "tar -c -f $TARGET --directory ${TARGET.dir} ${SOURCE.srcpath}")
env.Alias('release', release)


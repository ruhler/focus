
// Copyright (C) 2011 Richard Uhler <ruhler@member.fsf.org>
//
// This file is part of Focus.
//
// Focus is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Focus is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Focus.  If not, see <http://www.gnu.org/licenses/>.

Fonter is a library which wraps fontconfig and freetype to make working
with fonts easier in consoler applications. A fonter object represents a
single font you can use to draw characters or strings of characters to
consoler displays.

To use the fonter library, include fonter.h and link with -lfreetype
-lfontconfig -lfonter

-------------------------------
    const char* FNTR_Version();
-------------------------------
include::FNTR_Version.txt[]

The type FNTR_Fonter is a reference to a fonter object. It should be
treated as an abstract data type.

---------------------------------------------------
    FNTR_Fonter FNTR_Create (const char* fontname);
---------------------------------------------------
include::FNTR_Create.txt[]

----------------------------------------
    void FNTR_Free(FNTR_Fonter fonter);
----------------------------------------
include::FNTR_Free.txt[]

The following functions on fonter objects give you access to font global
metrics.

------------------------------------------
    int FNTR_MaxWidth(FNTR_Fonter fonter);
------------------------------------------
include::FNTR_MaxWidth.txt[]

------------------------------------
    int FNTR_Height(FNTR_Fonter fonter);
------------------------------------
include::FNTR_Height.txt[]

After you have created a fonter object, you can load a specific glyph for
drawing.

-------------------------------------------------------
    void FNTR_LoadGlyph(FNTR_Fonter fonter, wchar_t c);
-------------------------------------------------------
include::FNTR_LoadGlyph.txt[]

Once a glyph is loaded, you can ask for its width and access the greyscale
rendering of the glyph.

--------------------------------------------
    int FNTR_GlyphWidth(FNTR_Fonter fonter);
--------------------------------------------
include::FNTR_GlyphWidth.txt[]

--------------------------------------------------------------
    uint8_t FNTR_GlyphLevel(FNTR_Fonter fonter, int x, int y);
--------------------------------------------------------------
Return the grey level of the loaded glyph at the given location. The level
ranges from 0 to 255 inclusive.  Coordinate (0,0) is the upper left hand
corner of the glyph, with x increasing to the left and y increasing down.
   
It is okay if the coordinate (x,y) is outside the glyph rendering. In that
case the level returned will be 0.

The following convenience functions are provided to draw characters to
consoler displays.

------------------------------------------
    void FNTR_DrawGlyph(
      FNTR_Fonter fonter,
      CNSL_Display display,
      CNSL_Color fg,
      CNSL_Color bg,
      int x,
      int y);
-----------------------------------------
Draw the currently loaded glyph to the given display with the upper left hand
corner of the glyph at (x, y) of the display. The color fg is used for the
foreground color, and bg used for the background color of the glyph drawn.

-----------------------------------------
    void FNTR_DrawString(
      FNTR_Fonter fonter,
      CNSL_Display display,
      CNSL_Color fg,
      CNSL_Color bg,
      int x,
      int y,
      const char* str);
-----------------------------------------
Draw the given string to the display with the upper left hand corner of the
string drawn to position (x,y) of the display. This overwrites the currently
loaded glyph.

Fonter Example
--------------
Included with the fonter source is an fonterexample.c, which is an
example application which uses fonter. The application draws a string to
the screen and waits for the keystroke q before exiting.


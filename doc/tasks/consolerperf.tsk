
Sat May 21 21:34:23 EDT 2011

Task: consoler performance is yucky, how do I make it better?

Specifically I suspect a big problem is the api for transfering pixel data
from a client to a pipe to a server buffer to a graphcis surface.

I should test some things. Perhaps using flicker.

A. FillRect -> sdl surface
B. fill -> sdl surface
C. fill -> memory mapped sdl surface    (screen pixels memory mapped?)
D. fill -> memory mapped cnsldisplay -> sdl surface (back pixels memory mapped)
E. fill -> cnsldisplay -> pipe -> sdl surface
F. fill -> cnsldisplay -> pipe -> cnsldisplay -> sdl surface
G. fill -> sdl surface -> sdl surface

This should give me plenty of insight into the kind of API I'll be wanting.
I might want to make a special directory (under rsrch?) for these tests.

The API should hopefully allow for really efficient green like functionality.
That is the clients may be multiple hops away from the server.

Sun May 22 08:16:02 EDT 2011

Note: I can create an sdl surface from an array of pixels using
SDL_CreateRGBSurfaceFrom. That could come in handy. It's probably more
efficient to create a surface and blit from that surface to another than it is
to manually set the pixels in a surface. Just because they know how to do
blit, and maybe they can do it extra fast.

Now, how do I do this memory mapped thing?

The idea is I have a server and a client. The server makes a memory
mapped...let's say array of pixels. It then launches the client. The client
will... It should draw to the pixel array, then send a note telling the server
to consume the array, then wait for the server to respond.

In other words, we need a pipe between them anyway, to note when the server
should update the display, and when the server is done updating the display.

Could we use signals for that instead? Would that be more or less efficient? I
should do the pipe first.

Sun May 22 10:35:55 EDT 2011

I'm surprised at my initial results:

a 640 480 1000      1s
b 640 480 1000      4s
f 640 480 1000      4s
g 640 480 1000      4s

Which suggests using a pipe does not actually cost us a whole lot. It's
drawing thing on the screen pixel by pixel which is costly.

Hmm... This gives an idea. For sdlcsr, and really for RecvDisplay, what I
really want is a function which gives me a pointer to a row's worth of data at
a time. You specify the x, y, and width. Maybe that's all we need to go way
faster?

Sun May 22 11:17:17 EDT 2011

I changed up the interface for Recieving a display. It should support much
better performance I think.

Instead of writing a pixel at a time, we write a row at a time.
Instead of reading a pixel at a time, we read a row at a time, directly into
the target buffer.

The problem is, it doesn't work right. We aren't getting all the right pixel
data for some reason. I don't understand.

Let me do a code review. I need to review 3 things:

1. SendDisplay. - bug found
2. RecvDisplay. - no bug found
3. toscreen. -  - added check for y out of bounds.

Of course, if I were smart I would have done (1) before (2) and (3)...
Oh well.

But that didn't fix the issue. fillter works, boxer doesn't, pdfer
doesn't, pnger doesn't.

Let's focus on boxer. Look at the data sent, look at the data read.
For boxer, it appears we don't send any non-black pixels.

Oops. I found the bug. I was just repeatedly sending the first line.
Now things work.

And guess what! Performance is great!

Wow. Wonderful. So, I think, until further notice, we shall consider the
performance issue to be solved.

The deal: use buffered IO (which I've seen before to be a big problem), and
avoid extra copying.


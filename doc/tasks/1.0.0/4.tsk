
Wed Jun  8 23:15:06 EDT 2011

Task: In what language should I write my documentation?

I would like to have a nice language to write documentation in. Let me explore
what the options are.

First, my goals:
 - I would like to be able to produce:
    man pages, html, pdf files

 - I would like to be able to put documentation in one place, even if it's not
   all in one place in the generated documentation.

   For example, you might find the prototype of a function in a man page and
   then again in a tutorial. Ideally you could specify that prototype in one
   place so if it changes you only have to change it once. That one place
   being the C code might be nice...

I guess those are the two big points. The other one, which might be just me
trying to find an excuse to use my own language is:
 - ability to do abstraction.
    That is, functions, scriptability.

What are some options I should explore?

- man (nroff, groff, troff, or something like that)
   Does not capture semantic information. You can't do abstraction. This fails
   for pretty much every reason except it's trivial to get man pages from it.

- texinfo
   Produces: dvi, html, info, pdf, xml, plain text, etc..
   Format document as node: chapters, sections
   Includes references
   Does not produce man pages
    
- latex
- infodoc?
- doxygen
- plain text

- my own (tcl based markup)
   We could specify any structure by adding commands. It's totally flexible,
   meets abstraction requirement, can be made to produce all different sorts
   of outputs, can reuse the same structure in different places.

   The down side of this is it isn't a conventional format. I'll have to write
   all the generators, and other people who want to contribute to the
   documentation will have to learn my language.

Documents I've enjoyed reading are:
 - man pages
 - gdb, gcc, gnu manuals in general (uses texinfo)
 - libsdl and ncurses and such less so

You know, I don't know why I don't just use my own markup. I can describe
exactly what I want to, I can generate texinfo or man, share whatever I can. I
have the full power of tcl behind me. So let me do that, no?

I think it's either texinfo and man or my own tcl based. Man pages should be
describable at a higher level.

That's it. I'm decided. Right now (though I suppose I might change my mind
later), tcl is the way to go.

Describe the content I want to describe. I'll worry about translating to
different document formats later.

I need to pick a file extension. Um... tcl, dcl. dtcl. Okay. How about dtcl.
Good. I can make up my supported structures as I go.

I think the best model will be to think of myself building up a document tree.
Don't think of it as a markup.

Thu Jun  9 00:11:53 EDT 2011

Remember to keep in mind the 3 kinds of documentation:
 - reference 
 - subject based
 - tutorial

You know... all of those could be covered with texinfo. It's just generating
man pages which causes problems...

Does that mean I should not do man pages? Naw. With my system it should be
easy to make man pages.

Cool. I'm excited about this.

Sat Jun 11 00:19:27 EDT 2011

From documenting consoler library in plain text, I notice some things.

- We definitely want a (non-binary) tree of sections kind of structure
    Sections have names, content, and subsections.
- All functions are described in a similar way
    prototype
    brief description of use.

Sun Jun 12 23:10:05 EDT 2011

This is really the last major thing holding up release 1.0.0, so it's time to
make more progress.

Let me summarize the issue. I have documentation writen. It may not be great,
but it's got all the information, and can be improved in future releases. More
better documentation is always useful. This is just the start.

The big thing now is getting that documentation into two different formats.
1. man pages for library functions and programs.
2. texinfo document - which is basically the format I have now, but a more
standard format. I would love to be able to generate html and pdf of my
documents.

I need to start simple. Let's start with (1), because I have much more
experience (even if it isn't much) there than with texinfo, and I have some
examples already written up, so I can see what I need to do to get from what I
have to what I want.

Yes, I think this is a good place to start.

Information we need for the filler man page:
 - name: filler
 - section: 1
 - date
 - manual: "Focus Manual"
 - brief description
 - synopsis
 - description
    This is what we can reuse from what I've written. The other stuff isn't
    hard to duplicate, and can maybe be shared too...
    - paragraph 1 (desecription)
    - paragraph 2 (intro to keybindings)
    - table of key bindings
    - paragraph 3 (how to quit)
 - options (none)
 - environment
    cnslwidth - description
    cnslheight - description
 - bugs: email address.

We might need some more typesetting info, like references to "filler" should
be bold. That sort of thing will probably be clear. How about this, don't
require I be perfect the first time around. We can improve things later.

Now, compare that with my description:
 - name
 - description paragraph 1 (description)
 - description paragrpah 2 (intro to keybindings)
 - keybindings table
 - description paragraph 3 how to quit
 - environment variables.

Hmm... Same content, but different presentation. I'm worried using the same
source might not have things translate so perfectly... Well, it's worth a try.

But, gosh. This application is so simple, it seems way more work than its
worth to share a common source, doesn't it? Erg.

Okay, here's what I'll do. Let me thing of it as I'm using tcl to describe the
man page, and tcl to describe the texinfo file, and some text can be shared
between the two. Let's not fix a documentation language or anything like that
just yet. Does that make things easier? Let's see.

Sun Jun 12 23:55:10 EDT 2011

I wrote the man page easily enough. And I bet there is code their I can share
with other components to make things easier. I'll start the sharing when I go
to write the man page for the next component.
   
The real question now is, can I write a sensible texinfo document too? Using
the same tcl generation stuff?

I guess the first step would be to figure out how to write a texinfo document
on its own. So let me write the filler texinfo document the "right" way.

Mon Jun 13 20:59:00 EDT 2011

So I read through the texinfo manual, and I must say, I don't like it. It
doesn't, I think, totally capture the content of what you are conveying. It
has too much presentation. This notion that info and html and pdf can all be
generated from the same source is exaggerated: you have to write @node and
@chapter always at the same time?

I have never liked info files (probably because of the key bindings).

In other words, I think this is an area I can do better in than texinfo. I can
make my own simple format, and should be able to generate text, html, and pdf
(via pdflatex). I don't care if I don't generate info files.

That is, I don't think I should generate documentation by trying to produce a
texinfo and using that to then produce the final document. I think I should
describe my documentation the way I want to describe it, and use that to
produce the final document. If I describe it right, the translations should be
trivial.

Which brings me back to my very first question. In what language should I
write my documentation?

I'm concerned tcl might not be so good, because of how it handles newlines.
The syntax for tcl is really geared towards short command lists rather than
raw text data. Would a markup be better? Markups look nice, the problem with
them is they don't feel nearly so programmable to me.

Hmm... what you really want is...

I'm thinking for raw data you don't want to indent or anything, so you'd like
to specify it as lines from the file. So you want some way to identify lines
of a file as raw data for a block, and be able to name that block, refer to it
elsewhere, etc... That's not too bad I don't think. Have a special character
to introduce these blocks. I suppose @ could work.

@myblock
Foo bar sludge...

The other thing I think latex and texinfo have got wrong is doing chapter,
section, subsection. These things shouldn't be absolute, they should be
relative. So you'd like a way to structure blocks relative to their container.

@next
[block of text]

@down
[block of text]
@next
[block of text]
@up

... I'm not sure.
It certainly would be nice to have the text in the input in the right order.
Maybe you can name sections by their parent?

@section filler 

If text order in the input didn't matter, I would almost say do something
like:

@section a
@section b
@section c

@section parent
    @a
    @b
    @c

Or something like that.

Hmm... Anyway, let me follow a different trail of thought. What all things do
we need to specify?

text data - raw tex. paragraphs. whatever.
tables
lists

section structure

markup: things like: emphasis, or this word is special in that it refers to
something else, or references to other things. Or, for example, things like:
this 'q' is a literal q representing the character 'q', not just another word
that happens to have one letter which is q.

And, of course, I have to have a programming language which allows me to do
abstraction (functions).

The goal of the input should be to describe a tree of information, not to
describe a presentation. Presenting the information should be a different step
(maybe...). Maybe there should be two parts. The first part is building up the
information tree, the second part is flattening that tree again.

Let me play around with the consoler documentation, which I think is the most
complex. See if I can't make it pretty somehow.

Mon Jun 13 21:37:30 EDT 2011

The problem is, you can't tell what the hierarchy is from a flat text file.

Perhaps, then, the issue is trying to specify a document in a flat text file.
What if I used a directory structure? Or what if I had a special document
editor? We want to have a way to go to a specific node, and see just that node
and its children, and not care about parents. Directories are certainly good
for that...

Hmm... should I be crazy? Try that out?

Mon Jun 13 21:50:26 EDT 2011

I think I see what you want for describing the hierarchy. You want a directory
like structure, but where the directory specifies both content and children.
You can do this using the filesystem if you have a file foo.txt and a
directory foo, but it would be great if it was just one foo, which you could
edit the content of and cd into to get at the child content.

Let me continue to think about this and I'll get back to you.

Mon Jun 13 22:29:42 EDT 2011

I had this weird idea.

Imagine the document tree as a tree. Let's say just talking about sections and
subsections now. When working with this document tree, there are maybe a
couple of things to consider.

1. How much detail can you see.
2. Where are you.

So, how much detail you can see is like a measure of the depth. If you can
only see 2 levels deep, maybe any subsections beyond that you just see the
title, or don't see into at all.

And then where you are. If you just want to look at the "filler" section of
the focus manual, for example, you would like to be able to move to that
section, and suddenly have all the other sections like boxer, green, pdfer,
etc... to disappear.

You could do a number of things now to manipulate what you see. You could move
up or down the tree. Moving down would move towards whichever data you are
currently focusing on. Or you could expand or contract your range of vision.

So, for example, if I'm reading something like the texinfo manual, or a manual
I just want to read all through, I would move to the root of the tree, and
have full range of vision. It will show me everything on one page, I can read
it like a book in order.

If I'm just interested in a single section, such as the gdb remote serial
protocol, I could move to that section, and read the whole thing.

If I just want an idea of the structure of something, maybe because I want to
interact with the structure, or I'm just looking for ideas or summaries rather
than detail, I could limit my range of vision so I see just the titles of the
subsections, rather than their whole content. This would be useful in editing
the documentation. It's also kind of what happens in a table of contents,
except somehow theres a distinction of being able to see through titles or not
to titles of subsections.

So we can specify things fully generally.

1. You have a location.
2. You have a depth of content
3. You have a depth of titles.

What you see is: only stuff at your location and below, nothing to the side or
above. You see full detail for the depth of content, after which you see just
titles for depth of titles, after which you see nothing.

I'm not sure how this is useful in terms of deciding how to describe my
documents, but it's an interesting thought. The other one I'm going to have to
spend a bit more time pondering.

I guess what you want, perhaps, is a special viewer to take advantage of this.
It lets you control the view. You can navigate to places, you can limit what
you see, or expand what you see. Then, if this viewer also happened to have
editing capability, it could take advantage of all the same features, and
maybe make things easier to edit.

There's one big difference between viewing and editing, which is for viewing I
might have just a projection of the information available at editing. Like,
maybe I don't care when viewing that 
 foo bar
is different from 
 pair(foo, bar)
is different from
 list [foo, bar]
is different from
 description foo: bar
But for editing, we want to be precise about such things.

I have a couple ideas for that. One is, we already know we want to target
different presentations: text file or book where everything is flat, html
where you can have links. How about make the editor just a different
presentation which does make a distinction between all those different things.
That does have a way to show all the information.

The other is, I've said there are different details you want to be able to
see, such as section content vs. section title. We could say the section title
is a summary of the section content, so it's the same thing, just one contains
a higher level of detail than the other. Well, just add another detail to
content and maybe you get the explicit structure of the content. If these
things were part of the editor...

Wow. Wouldn't that be cool? If you go and edit some file which looks like junk
because there is so much detail about this is a literal and that is
description list and so on, and then you could take a step back and instantly
see what it looks like without all the detailed markup? And then take another
step back and just get titles so you can see the structure?

Where am I getting at all this? What I seem to be suggesting is, rather than
editing the source of a document, you edit the document itself. The difference
between source and product is now just the difference in how you view the
document.

I don't know if that really makes sense to do. Like I may have already said,
I've got lots of stewing on this to come up with something feasible.

Mon Jun 13 23:51:11 EDT 2011

I'm worried. I fear I could get stuck here. Am I trying to be too general?
What exactly is it I want to produce? Is it important I produce what I want to
produce in the best way right now? Or can I brute force things and clean them
up later? Think about all these things.

Wed Jun 15 23:30:19 EDT 2011

I've come up with something, and initial use suggests I'll like it. The
language is tcl, but with the following specific commands. For release 1.0.0
I'll focus only on these. No need to make the documentation perfect. I'm
committing to using this method for describing documentation for release
1.0.0. If there are problems, those should be punted to later releases.

section <title> <content>
 Define a section. Title is a string which is the title. Content contains a
 sequence of content items which include: paragraph, section, description,
 function.

paragraph <text>
 Define a paragraph. Text is the text of the paragraph. Whitespace is reduced
 to a single space and trimmed from front and back.

description <content>
    content is a list of strings alternating <name> <value> <name> <value>,
    etc... Whitespace in the value is reduced to a single space and trimmed.

function <return_type> <name> <arg list> <description>
   return_type is the return type of the function.
   name is the name of the function.
   arg list is a list of strings alternating <type> <name> <type> <name>.
   description is a sequence of content items (like for section content).
   Though it probably shouldn't include a section.

include <source>
   source is a file with these commands to include literally right here.

This is the core. Others I might want are:
envdescription - just like description, but describing an environment
variable. The distinction could be used for man pages. But no, let me not use
this this release.

synopsis - for describing a program and its flags and options. Not sure what
it should take. Probably name, list of options, and description? Maybe
name, and option description list?


The goals from here are:
1. Generate a text file document from the description.
Basically means numbering sections and subsections, flattening everything
else. Maybe identing and tabulating and such. But it should be pretty easy.

2. Generate an html file document from the description.
Like text, but just different way of expressing it.

3. Add to html document a table of contents.
4. Add to html a function index.

The way I envision implementing this is for each of the above tasks: text,
html, table of contents, function index, etc.. you have a different
implementation of the section, paragraph, description procedures.

For example, section will output the header, title, then eval its content.
Pargraph will just output its content. description will output a formatted
version of its content. You see? That should be pretty easy.

Cool. I really like this idea.

The one question that remains is dealing with man pages. I think the thing to
do for man pages for release 1.0.0 is have a standard boilerplate for each
man page, and just plug in the right section for the DESCRIPTION part of the
man page. We can throw everything there for now. Except maybe we can extract
the synopsis elsehow.

One other thing I might want to mention: you can refer to items in the tree by
hierarchy, where a section is identified with its name, and functions can be
identified by name. Hopefully that's plenty enough now to refer to whatever
you want to. In the future we might want to add: -id foo flags to each of the
structure commands.

Cool. I think I know the next step. Describe all my documents in this format.
Then try to generate something nice. I'll do a little of the gruntwork
tonight.

Thu Jun 16 21:13:41 EDT 2011

I've got the consoler document all formated now. I think rather than going on
to the other documents, I should try writing some generators. Just to make
sure it can work with the syntax I've provided.

First step: generate a flat .txt file with numbered sections.

Thu Jun 16 21:59:05 EDT 2011

Cool! It's almost sort of working. Some minor issues to work out.

+ top level of document shouldn't have a section number.
Because then every section is a subsection of section one.
Instead consoler.docl, for example, should not be in an enclosing section?

No. I just use a special case. The top level section is not numbered, but
rather it's name is the title of the document.

+ descriptions don't format well
They don't line up, and they don't strip the text inside the description. I'm
not sure what it is I really want.

I feel like the way man works is the values start all in the same
column, either on the same line as the key if the key isn't too long,
otherwise on the next line. Let me try that. And then they should line break
on that same column. Maybe that's not so bad...

I made it have the value be like a paragraph which is indented. It actually
looks pretty good, except for defining the keysyms. Oh well. Good enough for
me.


+ functions don't work
I disabled them because it was giving an error I didn't understand.
Fixed. I don't know why it started working now.

- functions with lots of arguments use more than 80 columns.
I'm not going to worry about this right now.


Hey! It looks good. I like this.

Not sure where the docl implementation thing should go. That's not really
focus specific... Don't worry too much about it right now.

Thu Jun 16 22:34:31 EDT 2011

Next step is, I think... generate html. That should be fun, becuase I can
generate links.

Hmm... but maybe I should do a little more grunt work now, save the fun for a
little later. Okay. Time to format more of the documents properly.

Thu Jun 16 23:30:39 EDT 2011

I added a synopsis command which currently just copies its single argument as
a text string verbatim, but I anticipate will become a much more precise way
of specifying options in the future.

I also added an include command for source files.

This is really cool.

Next step? I would say first is to try generating html code, including table
of contents and function index. Then that certainly satisfies the subject
documentation for 1.0.0.

After that, all that's left for milestone 1.0.0 documentation is the question
of man pages. Do I maybe not want to support man pages for 1.0.0?

I think it's worth a shot to produce, maybe not very good, man pages for
release 1.0.0. Let's have the base there, and most importantly the content,
even if it isn't presented well. Then we can improve the content later.

That is, yes we should do man pages.

I can have a general man page template. We can include functions and synopses
for everything, because I have that. Title and other stuff is fine. For
description of functions I have that. For description of programs, I can
choose the appropriate section (basically the top level for that program). I
can leave out all the other sections of the man page.

Yes. I think this is right. And it's maybe automatable. Or, at least not very
hard. For each program I can specify a name, brief description, and point it
ot the programs .docl. For the libraries I can generate a man page for each
function, ignore the brief for now.

Cool. So what we want for man pages is two things:
 - given a name, brief, and docl file for a program, generates a man page for
   the program.
 - given a docl file for a library, generates a man page for each function in
   the library.

That sounds like a plan. If I can do that, whatever man pages come out, that
will be acceptable as all the documentation I need for release 1.0.0 (with
html too). If it's not hard, I might as well do pdf while I'm at it. That, in
fact, may be easier than text was, because I don't have to keep track of
sections or anything.

Fri Jun 17 20:22:41 EDT 2011

Before I can do html, I have to figure out what the generated file will look
like. I think also it will be valuabe to reuse the same code as for the text
file, passing as a parameter whether what we are generating, because won't it
all be the same? I guess that's not clear.

Here's what I'll do. I'll try to manually create the html (and pdf) documents
from the generated text document. That should give me a good idea for how to
generate things. It also might be good to consider redesigning things in more
detail, because I've already been tempted to just hack things together, which
is bad.
 
Fri Jun 17 20:55:32 EDT 2011

How can we have a general framework for producing documentation?

I'm beginning to wonder if I should have a "document" command, which gives
things like title, author, etc... and all content has to belong to some
section? Or you could just define the top level section as being different. Is
there a reason to prefer one of the other? The other allows content outside of
sections, and I don't know if latex allows that.

I think I can have an engine that's common to all the generation types. The
way to produce a specific generation type is to supply some functions.

What functions would we want them to supply?
 - header, given the name
 - paragraph, given a pretty formated paragraph of text.
 - section header, given a section number, title, depth
 - section footer (not used by any currently, so maybe don't use)
 - description header
 - description item
 - description footer

Cool. So I think the easiest way to do this is to generalize the text version
by introducing these functions. I can have them named appropriately:
    description_header_html
    description_header_text
    etc..

Then call them in the code like: [description_header_$mode]

And all these things should return strings. Don't puts right to the screen. Or
maybe provide an emit function which wraps puts?

Ug. I don't know.

Fri Jun 17 23:04:56 EDT 2011

Here's an idea. What if I had a general purpose docl traverser. Then you can
use that by supplying callback functions: onparagraph, on function,
ondescriptionbegin, on descriptionitem. Things like that?

I'm thinking what I want to do is have a general frame work in which it makes
sense to describe the following things:

- generate text
- generate html
- generate function index
- generate table of contents
- generate man page for each function

Stuff that can be common to these (the traversal) should be common. The
differences ought to be described in a clear way.

I'll continue thinking about this.

Sat Jun 18 10:51:55 EDT 2011

Here are some continued thoughts.

Add hooks into the traversal routine, as suggested above. These hooks can be
described (for this first version) by implementing a procedure named
onfoo_$mode. The mode variable will be an input to the traversal routine. The
traversal routine will call the onfoo_$mode procedure with appropriate
arguments if that procedure is defined, otherwise it won't call anything.

I think I can clean up the (first version) implementation by morphing the text
thing into it. This is just a first version, so I can be a little sloppy with
global variables and such. In the future I may want to move over to namespaces
or more object oriented stuff. Not for release 1.0.0.

I should definately document these hooks. Otherwise we could end up with an
inheritance like mess. I'll do that in the source. I should also document the
document commands somewhere. But that's not required for 1.0.0.

Sat Jun 18 11:40:57 EDT 2011

I'm not happy with the testing situation for docl generation...

Sat Jun 18 12:17:39 EDT 2011

Okay! Cool. Now I'm generating text and html and it's pretty nice code I
think.

The real test will be when I try to expand it to support:
 - table of contents
 - index of functions
 - man pages

And, um, how I'll add all that stuff in. Becuase for html I'll want to do
multiple traversals, and not necessarally at obvious times in the document.

Sat Jun 18 12:28:18 EDT 2011

I hacked up a tex version too, though it has some problems:
 - functions, synopsis not typeset specially
 - needs to escape %, _, and do double quotes right
 - should produce a pdf, not just a tex (I haven't installed pdftex yet)

Sun Jun 19 10:32:11 EDT 2011

I've had some ideas.

To make the man pages more tractable, for release 1.0.0, what if I don't worry
about the man page conventions, and only about the man page formatting? Then
the man pages could be generated to look just like the other documentation,
only in the format of man. All the info is there, as required, it's just way
different from a normal man page in terms of layout and such.

The other idea is, we can separate the documentation out into modules, then
collect them together differently for the book documentation and the man page
documentation. I think my commands will work fine for specifying man page
sections too.

So, for example, have pdfer/synopsis.docl, pdfer/description.docl, and then
pdfer/man.docl, which will include synopsis and description at the appropriate
places, and pdfer/guide.docl, which will also include synopsis and description
at appropriate places, which may be different.

That's a thought anyway. I'll keep that in mind, but definately I'm going to
try generating man pages straight from the program .docl file, and see how
they turn out.

If they turn out not so unreasonable, and have all the content I need, then
I'll accept them for 1.0.0 and improve them in later releases.

Sun Jun 19 11:02:07 EDT 2011

So, they turned out not so unreasonable, which means I'll keep them and say
they are good enough for this release. I think they'll improve a bit in future
releases if I make them to.

Sun Jun 19 11:04:35 EDT 2011

One thing remains now for documentation in 1.0.0, and that is the library man
pages. I think I can hack this together pretty easy. I'll just add another
doc format: libman, which generates a man page for each function, using the
function description. It will be a little hacked up, but that should be okay
for this release.

Sun Jun 19 11:37:35 EDT 2011

Okay, so the library man pages are a little ugly (mostly the prototype is not
formatted right), but it's pretty cool that they are automatically generated!

So I think I've done enough for this task for release 1.0.0.

I'm not convinced using the same description for the guide and the man pages
will work longterm. The issue is man pages want a lot more detail, and guide
wants a lot less detail. To make it work I guess I have to describe the lot
more detail, and also indicate how much of that to ignore for the guide.

I may, perhaps, need to include alternate versions of the same information
duplicated to handle this.




Wed Jun  8 23:15:06 EDT 2011

Task: In what language should I write my documentation?

I would like to have a nice language to write documentation in. Let me explore
what the options are.

First, my goals:
 - I would like to be able to produce:
    man pages, html, pdf files

 - I would like to be able to put documentation in one place, even if it's not
   all in one place in the generated documentation.

   For example, you might find the prototype of a function in a man page and
   then again in a tutorial. Ideally you could specify that prototype in one
   place so if it changes you only have to change it once. That one place
   being the C code might be nice...

I guess those are the two big points. The other one, which might be just me
trying to find an excuse to use my own language is:
 - ability to do abstraction.
    That is, functions, scriptability.

What are some options I should explore?

- man (nroff, groff, troff, or something like that)
   Does not capture semantic information. You can't do abstraction. This fails
   for pretty much every reason except it's trivial to get man pages from it.

- texinfo
   Produces: dvi, html, info, pdf, xml, plain text, etc..
   Format document as node: chapters, sections
   Includes references
   Does not produce man pages
    
- latex
- infodoc?
- doxygen
- plain text

- my own (tcl based markup)
   We could specify any structure by adding commands. It's totally flexible,
   meets abstraction requirement, can be made to produce all different sorts
   of outputs, can reuse the same structure in different places.

   The down side of this is it isn't a conventional format. I'll have to write
   all the generators, and other people who want to contribute to the
   documentation will have to learn my language.

Documents I've enjoyed reading are:
 - man pages
 - gdb, gcc, gnu manuals in general (uses texinfo)
 - libsdl and ncurses and such less so

You know, I don't know why I don't just use my own markup. I can describe
exactly what I want to, I can generate texinfo or man, share whatever I can. I
have the full power of tcl behind me. So let me do that, no?

I think it's either texinfo and man or my own tcl based. Man pages should be
describable at a higher level.

That's it. I'm decided. Right now (though I suppose I might change my mind
later), tcl is the way to go.

Describe the content I want to describe. I'll worry about translating to
different document formats later.

I need to pick a file extension. Um... tcl, dcl. dtcl. Okay. How about dtcl.
Good. I can make up my supported structures as I go.

I think the best model will be to think of myself building up a document tree.
Don't think of it as a markup.

Thu Jun  9 00:11:53 EDT 2011

Remember to keep in mind the 3 kinds of documentation:
 - reference 
 - subject based
 - tutorial

You know... all of those could be covered with texinfo. It's just generating
man pages which causes problems...

Does that mean I should not do man pages? Naw. With my system it should be
easy to make man pages.

Cool. I'm excited about this.

Sat Jun 11 00:19:27 EDT 2011

From documenting consoler library in plain text, I notice some things.

- We definitely want a (non-binary) tree of sections kind of structure
    Sections have names, content, and subsections.
- All functions are described in a similar way
    prototype
    brief description of use.

Sun Jun 12 23:10:05 EDT 2011

This is really the last major thing holding up release 1.0.0, so it's time to
make more progress.

Let me summarize the issue. I have documentation writen. It may not be great,
but it's got all the information, and can be improved in future releases. More
better documentation is always useful. This is just the start.

The big thing now is getting that documentation into two different formats.
1. man pages for library functions and programs.
2. texinfo document - which is basically the format I have now, but a more
standard format. I would love to be able to generate html and pdf of my
documents.

I need to start simple. Let's start with (1), because I have much more
experience (even if it isn't much) there than with texinfo, and I have some
examples already written up, so I can see what I need to do to get from what I
have to what I want.

Yes, I think this is a good place to start.

Information we need for the filler man page:
 - name: filler
 - section: 1
 - date
 - manual: "Focus Manual"
 - brief description
 - synopsis
 - description
    This is what we can reuse from what I've written. The other stuff isn't
    hard to duplicate, and can maybe be shared too...
    - paragraph 1 (desecription)
    - paragraph 2 (intro to keybindings)
    - table of key bindings
    - paragraph 3 (how to quit)
 - options (none)
 - environment
    cnslwidth - description
    cnslheight - description
 - bugs: email address.

We might need some more typesetting info, like references to "filler" should
be bold. That sort of thing will probably be clear. How about this, don't
require I be perfect the first time around. We can improve things later.

Now, compare that with my description:
 - name
 - description paragraph 1 (description)
 - description paragrpah 2 (intro to keybindings)
 - keybindings table
 - description paragraph 3 how to quit
 - environment variables.

Hmm... Same content, but different presentation. I'm worried using the same
source might not have things translate so perfectly... Well, it's worth a try.

But, gosh. This application is so simple, it seems way more work than its
worth to share a common source, doesn't it? Erg.

Okay, here's what I'll do. Let me thing of it as I'm using tcl to describe the
man page, and tcl to describe the texinfo file, and some text can be shared
between the two. Let's not fix a documentation language or anything like that
just yet. Does that make things easier? Let's see.

Sun Jun 12 23:55:10 EDT 2011

I wrote the man page easily enough. And I bet there is code their I can share
with other components to make things easier. I'll start the sharing when I go
to write the man page for the next component.
   
The real question now is, can I write a sensible texinfo document too? Using
the same tcl generation stuff?

I guess the first step would be to figure out how to write a texinfo document
on its own. So let me write the filler texinfo document the "right" way.



Task: Milestone 1: a simple application.

Thu Jan  6 09:22:51 EST 2011

For milestone one, now that we have initial graphics and events encodings
defined, I should implement an SDL back end for running the application, and
implement a simple application to try it out.

The application I should implement: my pngviewer. Because it's in haskell it
should be trivial to implement a different raster back end.

So what we have is, a pngviewer implemented in haskell which takes as input
the input events codes and outputs the graphics codes.

To run it, we start another application, implemented in c, which forks the
pngviewer (or whatever client you give it), and interprets the outputs using
SDL.

This should be fairly easy to implement.

Some submilestones might be:
 - draw squares of different color on the screen


Sat Feb 12 19:46:31 EST 2011

I'm thinking the first step is a library. An api. An interface. This should be
analogous to ncurses. The client application will make library calls, in c,
which will lead to the application reading and writing stuff on stdin and
stdout. Then I'll have an application which takes one of these programs as an
argument, forks a process with pipes to talk to it, and uses SDL to draw
everything on the screen.

Let me write down the api. See api.tsk.


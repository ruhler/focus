
Sun Mar 27 09:49:19 EDT 2011

Task: Update the API

I propose the following:

Call the API SCI, for Simple Console Interface.
No need to have different server and client interfaces.


Display - a display buffer of pixels with specified width and height.
Display sci_display_alloc(integer width, integer height) - create a new display
void sci_display_free(Display) - free an existing display.

Console - A connection to the console (abstract).
stdconsole - predefined standard console connection (using stdin and stdout).

Client - A connection to a client (abstract).

Event - An event (not abstract).
sci_event_send(Client client, Event event);
sci_event_recv(Console console, Event* event);

sci_display_send(Display src, integer srcx, integer srcy, integer dstx, ...)
    - blit part of a display from client to console.

sci_display_recv(Client client, Rect* rect, f, arg);
    - receive a display: calls function f for each pixel, returns the
      destination rectangle in rect

Client sci_fork(const char* path, char* const args[]);
    - spawn a client process, return a connection to it.


Or something like that. I'm not sure of the names yet. Are long names okay?

Mon Apr  4 17:14:08 EDT 2011

sci is sort of taken. That is, SCI is a common prefix for science, and SCIM is
definately taken. Is there some better name I can come up with?

How about: TCI for trivial console interface? Too close to TCL? Yes. I think
so.

How about: 
SCA - simple console api
SCL - simple console    (too close to SC Lite?)
VSC - very simple console
FSC - fairly simple console
MSC - mostly simple console
RSC - Richard's Simple Console (too close to RCS?)
RSU - no. I reject this now.
GNX - GNX is not X (horrible!)

I like RSC best so far. There will always be something.
Except, it's maybe already taken.

ICS - Interface Console Simple

I mean, really there's probably nothing not taken in some way or another.
ICS is internet chess server.

Maybe I should be more specific in my name. Simple adds nothing. Interface
adds nothing. Console is something...

So what are we? A composable console api. Or a shared buffer based console
api, or an abstract console api?

Or maybe have a bigger name with a smaller prefix.
The name currently is technically focus, but that was always meant for what's
become called "green".

What about my traditional strategy for names?
quinne, ione, joshua, manani, ruin.

rhapsody, achmed.

Gosh. This is tricky.

Mon Apr  4 18:27:06 EDT 2011

I went for a walk, and I think I've come up with a good solution.
What do you think about this:

As the name of the library: consoler
As the prefix of the functions: cnsl

I think that's nice. Then the terminal emulator should just be called termer.
Goes along with boxer, pnger, pdfer. What fun.
    
Cool. So can I make the switch to this new api? I suppose it makes more sense
to do it when I'm on a computer I can try it out on.

Tue Apr  5 19:59:59 EDT 2011

I need naming conventions.

I often have a verb and a noun. So what are my options?

verbnoun        getred, getpixel, iskeypress
verb_noun       launch_client
noun_verb       display_free, event_send
nounverb
verbNoun
nounVerb

Not so many now, are there...

Still, this is going to take some thought. I'm not up for it now. I'll let you
know what I decided later.

Wed Apr  6 18:38:09 EDT 2011

I failed to make the decision, so I guess I have to do it now. Hmm...

red_get, getgreen, getblue
allocdisplay
ndisplay
fdisplay
freedisplay
get_pixel pixelof
set_pixel pixelto
send_event
recv_event
send_display

FreeDisplay
RedOf
GreenOf
GetPixel
SendEvent

I hate to say it, but it looks like
VerbNoun might be best. Contrast with with just Noun for types.
So we use:

CNSL_GetRed
CNSL_SetRed
CNSL_GetBlue
CNSL_AllocDisplay
CNSL_FreeDisplay
CNSL_GetPixel
CNSL_IsKeyPress
CNSL_IsKeyRelease
CNSL_LaunchClient
CNSL_CloseClient
CNSL_RecvEvent
CNSL_SendEvent
CNSL_SendDisplay

Yes. That will have to do.
Not sure what rgb8 should be called.
CNSL_MakeColor? 
CNSL_MkColor?
CNSL_RGBColor?
CNSL_WithColor?
CNSL_FormColor?
CNSL_SpecifyColor?
CNSL_CreateColor.
CNSL_NewColor.

Okay? Let me go start renaming things.

Thu Apr  7 19:18:56 EDT 2011

Renamed everything, implemented rough draft of the new api.

What's next? Perhaps I should just go all out, rewrite all the applications
using this new api, try to compile them and test them out.

Traditionally this method of: rewrite all then try to make work hasn't gone so
well. Oh well, let's give it another try, see if that's still the case.

Let me note something I'm worried about now: Before when the client gave end
of file we stopped, but I think the new implementation doesn't do that. Just
something to watch out for.

Wrote up everything. Two issues have come up

1. When are things pointers, and when are things not?
Specifically: Event, and Client, and Console.

I feel like I'm inconsistent, and it makes a difference.

2. How to initialize stdcon?
It needs to point to something (if Console is a pointer).

Unless I just want it to be NULL, but really I don't.

So I guess what we should do is have CNSL_Init and CNSL_Quit functions.
And remember to always call them. That's a little annoying, but probably wise
for the future anyway. Okay, I'll add that.

Thu Apr  7 20:00:43 EDT 2011

I added that. Everything compiles now.

The trouble is, how do I test it? (the reason it's troublesome is because I'm
working from pacific right now, and have no way of running a graphical
application).

The answer is, I need to implement the testing thing. That is, I need to write
unit tests as in testing.tsk.

So, let's assume it works. Then write the test case to show otherwise. I
should not need a graphical environment to test this.




Task: How to represent events?

Thu Jan  6 09:13:48 EST 2011

We need some way to send events, such as keyboard events, to applications. How
should we represent them?

Some stream of UTF-8 characters, yes, but how do we encode the events as
characters?

Key presses are pretty natural. But should we associate a key press with a
character, or a key? For example, SDL does key, forcing you to map that to
characters yourself. That way you can get things like SHIFT and CTRL, which
are great for games because they are bigger keys.

Easier would be just the keycode of the key. Then have some library to
translate it to key presses, and another library to translate it to
characters. Users can choose which translation they have done.

Then we'll want key press and key release.
In the future things like the mouse could be accessible, but I don't need that
yet.

Then we may want things like:
 - resize event
 - quit event

But for now, key press and key release should suffice. So lets do:

PHH - press key with scancode HH, where HH is hex for the code.
RHH - release key with given scan code.

Thu Jan  6 09:31:13 EST 2011

Another thing we're going to want is timing events of some sort.

Thu Jan  6 20:06:44 EST 2011

First question: how do I represent the client side of the application library
(which I'm calling "grapps")?

We want a way to get the next event, analgous to SDL's WaitEvent.

And later we'll want to support both getting of keycode and getting of key and
getting of character, all three different levels.

We want an abstract data type. That's clear. Which means we need functions to
access it.

Define a thing called an Event. (I hate C).

Maybe first I should put this interface in haskell.

Now how will it work? Define a Grapps monad. The Grapps monad has the
following like stuff.
 
-- Get the next event (blocking)
event :: Grapps Event

-- Return the type of an event.
etype :: Event -> EventType

-- The event types (public)
EventType = KeyPress | KeyRelease

keycode ... but this isn't safe. Can we do it safely? I guess we should make
Event a public type then? I really rather not. I really better not.

Why do I loose type saftey here?

Let me try again.

event :: Grapps Event

type KeyCode = Integer 
data Event = KeyPress KeyCode | KeyRelease KeyCode

But that's not enough. So let's give them more information?

Okay! Try 3:

data Event = KeyPress KeyPressEvent | KeyRelease KeyReleaseEvent

-- Get the code of the key pressed.
keycode :: KeyPressEvent -> KeyCode

-- Get the keyboard symbol of the key pressed.
keysym :: KeyPressEvent -> KeySym

-- Get the character associated with the key pressed.
character :: KeyPressEvent -> Char

Yes. This is making progress now. Nice and safe and abstract.

I like it. Not sure how I'll load the keymap. Oh well.

Good. This is all I need.

Thu Jan  6 20:19:18 EST 2011

Wait. I had another thought. The keysym and character stuff should be totally
separate right? They can be.

Turning into the keysym from the keycode is a straight function.
Turning into the character requires knowledge of what modifiers are on. But
what modifiers are on is a function of the history of keysyms.

You know what? I'm clearly not thinking straight. Let me stop while I'm only a
little behind.



Tue Apr  5 09:38:07 EDT 2011

Task: I need test cases

I'm hesitant to upgrade the API because I don't have any automated test cases
in place. This means I need test cases.

The difficulty is, how do you test something graphical?

The answer is not so bad. Implement a dummy console server. Let's say it has a
tcl interpreter so you can write tcl scripts to control it. You can have like:
send_event commands in tcl. And maybe a way to generate an image from the
display buffer. Then it should be pretty easy to test the clients.

Testing the sdl console of course will be harder to automate. Perhaps it's
okay if it isn't automatically tested, because it's what I'll end up using
when I interact with the programs?

It will obviously require some setup work to make testing feasible. But I
suspect that will be well worth it.

In fact, this should probably be the next step. Even before I update the api.

Okay, here's the easy way to do it. Write a console server which takes as
input a tcl script to drive it. It will define some tcl functions (send event,
get display, that sort of thing), then interpret the script you gave it.

That way I don't have to worry about tcl libraries and all that yuckiness. It
acts as a standalone executable.

Should we assume it works with a single client? Or should we include functions
to launch clients from tcl? Might as well do that.

Let me propose the following functions we provide (in addition to everything
tcl has):

consoler::launch
    Inputs:
        path - path to the client to launch
        width - width of the display to use 
        height - height of the display to use
        name - name of the display
    Outputs:
        name - name of the display which is now a command to interface with
        the client.

$name send  
    Inputs:
        event type (enum: keypress, keyrelease)
        event value (number? enum?)
    Outputs:
        (none)

$name display
    Inputs:
        image: name of an image photo to draw the display to
    Outputs:
        image is updated with current display.

So this will require tk? I guess the question is do I need tk to work with
images? Or, really, do I need X? That would be really unfortunate. There must
be some way to manipulate images in tcl without X...

It looks like that may indeed be the case, which is totally stupid. The image
library should in no way require X. The question is, how do I use it?

Because what I would love to be able to do is take snapshots and compare them,
and check specific pixel values and stuff like that.

Oh well. Maybe the interface has to be lower level. I don't so much care about
performance for these tests, so it might be enough to just use:

$name display
    Inputs:
        x: an x position in the display
        y:  a y position in the display
    Outputs:
        A 3 tuple of 8 bit rgb values which is the color at that position.

It's a little more annoying to work with, but should be wrapable in higher
level abstractions, and doesn't require X to run.
        
        
There. That's easy enough.
Maybe we also want a way to test if the connection to the client is still
open. I can add that later.

How can I test this?

I think it would be useful to have a client which, depending on what key you
press, changes the background to a solid color. Maybe call it filler. We could
use that to test the tests, and I'm sure it would help in testing green too.


Cool. Sounds like a plan to me.

Summary of next steps (not sure what order):
 + implement filler app which just colors the background solid based on key
   presses.
 - implement tclconsol which provides this tcl interface to a console.
 + upgrade the api to cnsl as described in api2.tsk.
 - write a test for filler using tclconsol.

Once I get all that up and running, I'll be in good shape moving forward.

Thu Apr  7 20:27:04 EDT 2011

Some questions.

Do I want to reconsider the names of things to match with the new api?
Update to the display will be done asynchronously, right, so I need some sort
of threading to make sure we don't step on our toes? Or should recieving an
updated display be explicit? Err... somehow I think that's a bad idea.

I suppose if tcl has threads, we could leave that up to the user?

Err... do I really need tcl for this? Can I just write some c programs
instead? I feel like that would be much easier and just as useful. Especially
if tcl isn't going to give me this image stuff without tk.

That means now I should be able to write my first test of filler in c.

Yes. Somehow I think this will be better.

Thu Apr  7 20:36:12 EDT 2011

I still have this trouble of: we don't know how often a client updates the
screen. For example, two successive updates of the screen, one half at a time,
from the users perspective is functionally equivalent to a single massive
update. How can I let the client do either and still pass the test cases?

Perhaps I can have a way to receive all the currently pending displays. That
is, have a nonblocking version of RecvDisplay.

Bugger. This is going to be a bit of work. No wonder I haven't already written
a bunch of tests for this.

I'll think about this and get back to you tomorrow.

Sat Apr  9 10:37:53 EDT 2011

I thought about it. Here's what my conclusions are:

What I really want is some way to recieve all pending display updates. That
is, do RecvDisplay in a loop as long as it will not block.

Then hopefully I can not worry about this issue (but it might creep up in some
places, because we will still be nondeterminate). I suppose the first question
to ask is, what do I have to do to do a nonblocking read on a FILE?

Looks like I need to use the low level file descriptors if I want nonblocking
IO in c. I don't think I really take advantage of the streams: we do fflush
after writing, and always know exactly how much will be ...

err, that's not true. Say I get a whole bundle of events. The buffered fread
will improve performance a bunch I expect.

Oh well. Stupid language limitations.

Could I use threads to make this nicer? Have one thread recieve all updates?
Sounds risky. What if I have a variable that says whether that thread is
blocking? No. Too risky. Too hard.

These are fifos right? Or rather, pipes. I wonder if pipes have anything
special related to nonblocking...

No. Nothing special except an easy way to make them nonblocking.

Well, fortunately all this is hidden within the CNSL api.

It's just, sometimes I want to do a nonblocking call, and other times I want
to do a blocking call. What I really want is two calls:
   read - which is blocking
   poll - which just asks if we will block or not.

Then the nonblocking is trivial. That is, add a
    int CNSL_PollDisplay(CNSL_Client client); 
function which asks if there is a pending display ready to be recieved.

Implementing that on top of linux...

Okay. Here's the plan. Keep the pipes blocking. That way we can do the
blocking read and write easily. But switch from FILE* to plain old file
descriptor. That way we can use the poll or select calls and use those to
implement the CNSL_PollDisplay function.

Okay? Good. What's the plan now? Do I want to again just dive into things, or
do I want to write some test case first, even before I have the nonblocking
thing? Or do I want to manually test first, before I have the nonblocking
thing?

I think the best thing to do would be
1. test as is now manually.
2. switch to file descriptors.
3. test again manually.
4. write atomatic test.

But you know? I don't really feel like doing that. So maybe I'll switch right
to the file descriptors and manual test and see how awful that is.

Sat Apr  9 11:31:10 EDT 2011

The problem is, read and write don't promise to wait until there is data
available. I think if we are part way through writing a display, we might only
read part of it?

Perhaps as long as I only read in the same size chunks as I write it will be
okay.

Sat Apr  9 11:38:15 EDT 2011

Okay, I've implemented the PollDisplay function. Now I should be able to write
a filler test, right?

Launch filler.
Recieve all displays.
Verify initial color at some point (say 20, 30) is black.
Send w key.
Recieve all displays.
Verify color at some point (say 20, 30) is white.
Send q key.

That should be a good start, right?
Let me see if it works!

Sat Apr  9 12:05:13 EDT 2011

I'm not convinced the PollDisplay implementation works. But my test did
uncover a bug in the consoler implementation (used &event instead of event),
which is cool.

So now I'm on the way testing wise and can start making forward progress.


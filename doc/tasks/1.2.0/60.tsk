
Sat Aug  6 17:07:00 EDT 2011

Task: tclify the major applications

Also known as key remapping library, but really it's more than just key
remapping.

Here's what I envision. Each application has a bunch of commands. For example,
pdfer has: quit, next, previous, end, home, goto, scroll, etc... Currently
each command is hard coded to a key. That works fine for me, because it's all
the keys I want, but I know if I weren't me, I would really want to change the
keys to be something else.

So we would like to be able to do local configurations on the applications. Or
rather, other people would like to be able to have different configurations
than my configuration, which is hard coded. It will be more flexible if you
can specify key mappings and configuration stuff at runtime rather than at
compile time.

Again, it's a little weird, because I don't personally gain anything from this
change, except if I can get other people to buy the software because of it.
Perhaps if I have a way to enter tcl commands while the program runs, that
could give me some nice power I didn't have before. Or I could have different
modes, like for pdfer a viewing mode and a presentation mode and so on.
Perhaps it could help with testing? I could write my tests in tcl instead of
c?

I don't know. Anyway, the idea is each command would be exposed as a tcl
command, then the user could map them to keys in whatever way he wants to.
Other configuration commands could also be supplied, like for fonts and colors
and things.

Sun Aug  7 18:20:10 EDT 2011

I guess the best way to start will be with filler. Be able to remap the filler
commands and try it out.

Making tcl commands should be easy. I just have to register them
appropriately. It may even help clean up the code by making it more like a
library, so more useful.

The hard part will be translating input events into commands to call, and
figuring out how to change this translation with a command.

Start simple. Say single key presses can be mapped to commands. From the users
point of view you'll want something like:
    key <key> <command>

Where <key> is something like
    a-z, A-Z, maybe ^a-^z for control keys.

To implement it... I feel like I've done this before already.
prerelease/kmapper.tsk? Just have a big lookup table mapping 
(shift X ctrl X keysm) -> tclcommand.

The tcl commands things will be specific to each application. The key
translation thing, however, can be a library. What sort of api do we want for
this library to have?

I think it's pretty simple. We want a function to let you do a mapping:
    key(bool shift, bool ctrl, keysym sym, string cmd);

Callable from both c and tcl (the tcl version can take a string for the
modifier and keysym specification).

Then the user application will instantiate a tcl interpreter, initialize this
library (which adds the commands to the interpreter), specify a bunch of
default commands, then as part of the main loop do something like:

    while (!done) {
        input(GetEvent());
    }

Where this input function is part of the key mapper library, and calls the
right application command.

Sun Sep 11 10:15:09 EDT 2011

What do I need to do for this?

I guess firstly I should rewrite filler to be more of a library? Hmm... Or do
I need to do that?

Perhaps I should make some global variables global. Then implement the
following commands as separate functions:
    red, green, blue, cyan, yellow, purple, white, black, quit,
    double, halve

This is all without tcl. Regardless, that will be a helpful first step.

The next question will be how to register all the commands in a syntax
friendly way. Does each command need its own little tcl wrapper? Is that too
much work to write? Can I have a common function to write that? Or perhaps a
macro? Let me not worry about it for now, because filler is so simple it may
not matter.

Okay. Plan is clear. Let me global command functionize filler.

Sun Sep 11 10:26:53 EDT 2011

It's interesting to see how filler changes when using global variables. There
is less repetition of things, less clutter. Is it worse? Harder to read and
maintain?

I think it would be fine if we had the notion of an object, just a way to
group concepts together or something. I don't know. What's wrong with global
variables? Maybe in small code nothing? Maybe if you have the proper abstract
interface to a chunk of data nothing?

Hmm...

No, I think I see the problem with it. Use of the data is spread throughout
the code, so it's hard to understand the data structure and what changes are
done by what parts of the code. If instead we only interact with the data in
functions specific to how the data is used, it becomes much easier to figure
out how the data can be accessed and changed and how does so. This means I
really ought to clean up filler to be like that. Either with a global
instance, or data structure, or something. That is, I think I should have a
struct and my functions should take a pointer to a struct to operate on. This
becomes my filler library.

Let me try it, see how onerous it is.

I must say, there certainly are some nice things about this. For example, it's
obvious what is a parameter or input vs. what is part of the filler object
that is being read or modified.

And if I really make it a library with a separate header file, then
documentation is much nicer.

Let me think a little on what I want to do. Maybe have filler.c and main.c? Or
something like that in the filler directory. See how that cleans things up.
The main.c can hold the tcl wrappers.

Sun Sep 11 11:20:52 EDT 2011

I factored filler out into a library. It's kind of nice I guess. Seems like
more code. But now that we have it like that, it seems perhaps clear that
filler provides the low level operations: resize and fillwith, and the way to
implement main will be to implement the commands directly as tcl functions.

The first step, I think, will be to use a tcl interpret for evaluating the
commands, but not for doing the key mapping?

Err... I'm starting to get confused. Why do I need tcl again?

Because it gives a nice, natural way to do key mapping, and makes filler like
a tool that you can now script, which could be nice. It make more sense with,
for example, a pdf viewer, where you maybe want to say things like: go forward
7 pages. That's a new command you can write without having to recompile the
code. It makes the application much more general. In fact, with filler, we
could expose a fillwith command, then you could define your own colors if you
prefer.

Um, one wonders then if fillwith and resize should be the only tcl commands,
and the main application should all be written in tcl? Except how do you get
input?

That is, the main application could be implement as a tcl script rather than
compiled in. Why shouldn't I do that rather than hard coding something in C?

Let me think about that for a little bit.

Sun Sep 11 15:53:02 EDT 2011

Next step, add a tcl interpreter and implement the commands
    red, green, blue, cyan, yellow, purple, white, black, quit,
    double, halve

Instead of calling functions directly, do a tcl eval on the key maps. That
will be changed eventually, but for now will make a nice step.

So, trick is to remember how to instantiate a tcl interpreter and add
commands.

Sat Sep 17 11:29:58 EDT 2011

I tclified filler. It has the tcl interpreter and the commands. The next thing
to do will be the key mapping stuff.

Sat Sep 17 11:32:49 EDT 2011

How do I do the key mapping stuff?

I want to create a mapping from ... key press to tcl script. Tcl script can be
stored as a string, that's easy. What is a key press? Why a keypress and not
an event? Should I start specific or general?

I know in the near future I'll want to be able to track ctrl and shift
modifiers, so I might as well allow that now, right? Or better to start with
just a raw key symbol, without modifiers, make sure that works, then update
it? As a sort of intermediate step?

Well, whatever I decide, I think it's clear I'll want an implementation of
some sort of map structure, and that can be abstracted away with two
functions:

map(event, script); Adds a mapping.
lookup(event); Looks up a mapping.

Initial implementation can be a singly linked list, which I suspect is easy to
implement, and won't be too slow for such a small number of entries and the
whole interactivity of it. I can change it to something else later if needed.

ctrl and shift will be easy enough to add, let me just do so right away. Or I
suppose I could make it even more general. Use Event directly, but have
another field which is State, and I can add state later? It can't matter that
much either way.

After I implement the map, I can try that directly. Add my events to the map,
verify it works. Allow me to do that now?

EventMap Create() - create a new event map.
void insert(EventMap, Event, script) - insert an event into the map.
script lookup(EventMap, Event) - look up an entry in the event map.
void Free(EventMap) - free an event map.

Start with that. Prefix is... EM? EVNTM EVENTMAP EMAP EVENTM EVMP EVNTMP
Eventer_ aha! good. Eventually it will be its own library. For now I'll put it
together with filler.

Sat Sep 17 12:17:07 EDT 2011

Okay, did that. Now the next step will be adding the reconfigurability. I
figure that will be as simple as:

  1. Provide a tcl command to insert a mapping.
  2. Source a tcl script at startup.

Here's an idea. I would like to have default key mappings by default, if the
startup script isn't found (which shouldn't be an error). For now let me just
define the key mappings, and the user can overwrite those if desired. In the
future I can add a way to clear all keymappings the user can use if he
prefers. That way the defaults are built in, don't need an extra file, work
fine with test cases, and can be completely reconfigured or partially reused
or whatever.

Cool. Let me try this after lunch.



Sun Jul 31 15:29:29 EDT 2011

Task: alternative to scons?

Scons is much better than make, but it's still a big pain to use.

Complaints about scons:
  - figuring out how to add a builder is complicated
    (though I'm always surprised when I get it working that it works)
  - strange and very annoying stuff happens when trying to copy a directory
    with the same name as a variant directory. I don't understand how it
    works.
  - implicit intermediate files for different environments need to be
    explicitly renamed (thinking profiling versus nonprofiling programs)
  - dependencies must be specified properly and could be wrong (happens
    occasionally)
  - it's too complicated to expect someone else to learn and figure it out.
    *** this is a big point ***

I would like to at least consider some alternatives.

One alternative may be to use scons, but not to do it in the sconsish way.
Write and use my own abstractions and just use the underlying scons mechanism.
That may or may not help.

What I would really like to try (though it will likely have its own problems),
is a tcl based solution which leverages something like strace to automatically
and accuratly figure out all the dependencies for any command you run.

So it will be like tcl, but we remove those command that let you interact with
the world except for some explicit exec command which has been modified to run
the command with strace and figure out the dependencies.

For the first try we could have a model where you always build the entire
project by running all the commands in order, but the tool is clever enough to
sometimes make things go faster by not rerunning things that don't need to be
rerun.

The overhead to learn it? Hopefully none. You just have to know how to specify
your build commands, and you can use all the scriptability of tcl that you
already know and love.

No complicated explicit dependency lists or dependency search algorithms, or
having to worry about such things (perhaps). We may need to make it a little
more complicated to handle certain things (like allowing commands to depend on
generated files), but I could deal with that when I get there, right?

Sat Aug  6 21:41:46 EDT 2011

I want to figure out about how to do this ptrace thing. Maybe try it out on
some commands and such.

Goal: given a shell command to run, run it and output the list of input files
and output files. That is, the list of files read and the files written. In
the future I'll want to do a list of environment variables too probably, but
don't worry about that now.

So! First step, read the ptrace documentation. And maybe strace too.

First question, I suppose, is do I need to use ptrace, or does strace already
have everything I need? Would it be easier to piggy back on top of strace than
to potentially reimplement much of it? I guess the only way I'll know is to
first understand the ptrace interface, to figure out how hard it is to use...

I suspect what I'll have to do is instrument all the system calls related to
files. Or is read and write enough? Or is open enough? Then I'll also need to
instrument the exec and fork family, in order to trace recursively. That
sounds like a bit of work...

Yes. It looks like a lot of work. Hmm...

Maybe for preliminary investigation I should just play with strace, see if I
can't at least see the information I want to see using that.

Okay? That sounds fair to me...

Not sure what to try it on first. Maybe a simple call to gcc would be best.

Sat Aug  6 22:35:22 EDT 2011

Well, here's one possible problem. What about programs like gcc which create
temporary files? The names of the temporary files are certainly likely to
change, won't that cause problems?

Hmm... Sounds like a lot of work.


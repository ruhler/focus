
Sun Jul 31 15:29:29 EDT 2011

Task: alternative to scons?

Scons is much better than make, but it's still a big pain to use.

Complaints about scons:
  - figuring out how to add a builder is complicated
    (though I'm always surprised when I get it working that it works)
  - strange and very annoying stuff happens when trying to copy a directory
    with the same name as a variant directory. I don't understand how it
    works.
  - implicit intermediate files for different environments need to be
    explicitly renamed (thinking profiling versus nonprofiling programs)
  - dependencies must be specified properly and could be wrong (happens
    occasionally)
  - it's too complicated to expect someone else to learn and figure it out.
    *** this is a big point ***

I would like to at least consider some alternatives.

One alternative may be to use scons, but not to do it in the sconsish way.
Write and use my own abstractions and just use the underlying scons mechanism.
That may or may not help.

What I would really like to try (though it will likely have its own problems),
is a tcl based solution which leverages something like strace to automatically
and accuratly figure out all the dependencies for any command you run.

So it will be like tcl, but we remove those command that let you interact with
the world except for some explicit exec command which has been modified to run
the command with strace and figure out the dependencies.

For the first try we could have a model where you always build the entire
project by running all the commands in order, but the tool is clever enough to
sometimes make things go faster by not rerunning things that don't need to be
rerun.

The overhead to learn it? Hopefully none. You just have to know how to specify
your build commands, and you can use all the scriptability of tcl that you
already know and love.

No complicated explicit dependency lists or dependency search algorithms, or
having to worry about such things (perhaps). We may need to make it a little
more complicated to handle certain things (like allowing commands to depend on
generated files), but I could deal with that when I get there, right?

Sat Aug  6 21:41:46 EDT 2011

I want to figure out about how to do this ptrace thing. Maybe try it out on
some commands and such.

Goal: given a shell command to run, run it and output the list of input files
and output files. That is, the list of files read and the files written. In
the future I'll want to do a list of environment variables too probably, but
don't worry about that now.

So! First step, read the ptrace documentation. And maybe strace too.

First question, I suppose, is do I need to use ptrace, or does strace already
have everything I need? Would it be easier to piggy back on top of strace than
to potentially reimplement much of it? I guess the only way I'll know is to
first understand the ptrace interface, to figure out how hard it is to use...

I suspect what I'll have to do is instrument all the system calls related to
files. Or is read and write enough? Or is open enough? Then I'll also need to
instrument the exec and fork family, in order to trace recursively. That
sounds like a bit of work...

Yes. It looks like a lot of work. Hmm...

Maybe for preliminary investigation I should just play with strace, see if I
can't at least see the information I want to see using that.

Okay? That sounds fair to me...

Not sure what to try it on first. Maybe a simple call to gcc would be best.

Sat Aug  6 22:35:22 EDT 2011

Well, here's one possible problem. What about programs like gcc which create
temporary files? The names of the temporary files are certainly likely to
change, won't that cause problems?

Hmm... Sounds like a lot of work.

Tue May 20 22:22:11 EDT 2014

tcl sort of works, without dependency tracking. It's what I use for smten. But
I want to explore a different approach. Why not use autotools?

The benefits of autotools: people are comfortable with them, and they should
work on lots of platforms. Also, it would be good to try, to see if it's worth
doing in general in place of make or scons.

I imagine getting set up with autotools will be a bit of work. A step-by-step
kind of thing.

First questions:
* How do we control what programs/libraries get built and installed?

Here's a review of the component dependency list:

boxer:: none
consoler:: none
documentation:: asciidoc
filler:: none
fonter:: freetype2, fontconfig
green:: none
imager:: libjpeg, libpng
pdfer:: freetype2, fontconfig, poppler-cpp, [poppler-cairo, cairo]
sdlcsr:: sdl
termer:: freetype2, fontconfig

I wonder if auto-tools support components?

Anyway, the idea should be:
 * you can manually disable or enable any component
 * components you don't have the dependencies for will not build
    - but it should be clear somewhere that they have been disabled
 * probably just want to try to build everything by default, disabling what
   doesn't work out of the box.

Well, that's pretty easy.

What are the next steps?

1. Start by setting up the auto-tools to work with the consoler library
and the consolertest case.

2. Then get them to work with boxer.

3. Then get them to work with everything else, one component at a time.

Should be easy. Let me start by researching what we need to get started with
consoler.

I'll target autoconf 69 and automake 1.14, which is what I have installed.

Notes:
 * autotools can be nested. Is that a good thing to do to handle multiple
   components?

Options:
  Recursive Make
    - standard for legacy reasons, not other good reasons.
    - supports conditional subdirectories
  Alternative
    - is not at all well explained in the manual 

Hmm... This is not going to go as smoothly as I like, I suspect.

People suggest cmake as the most decent alternative, but it doesn't appear to
be up to snuff from what people say.

So it's worth trying autotools.

Let me not do recursive stuff?
I don't know.
Let me just do whatever works.

Wed May 21 16:04:17 EDT 2014

Let's set up things with consoler and see what goes wrong.

It might be a little messy to start. Don't worry about that.
I don't think each component should be treated as a separate thing needing
configuration.

Questions:
* How to do a library instead of a program?
  Okay. Looks simple enough.

* Do I need to specify that my test case needs to be linked with the library I
  built?
  
  Let me try and see.

I think I have the basics in place for consoler with the test case.

Let me try building, and see what happens.

It works! Cool. That's nifty.

Next steps:
* Figure out how to do the pkgconfig for consoler
   Looks like:
    - I specify foo.pc.in
    - I use @prefix@ to refer to that
    - I add foo.pc to the autoconf AC_OUTPUT list.
   Or perhaps:
      I add foo.pc to an AC_CONFIG_FILES([foo.pc]) macro
   Oh. That's what I meant. I get it.
   Now, in order to install it?
   Poppler does:
        pkgconfigdir = $(libdir)/pkgconfig
        pkgconfig_DATA = foo.pc
   Why does this make sense?

   Oh. Maybe it's: foo_DATA gets installed in foodir.
   So by defining the directory, that then makes sense.

   Yes. This is what the automake manual says to do. Good.
   And it works. Cool.
    
* Figure out how to do the documentation for consoler (could be tricky) 
   I could try texinfo. I think that would be worth while.
   And man.
  
   But the thing is, I want a pre-processor.
   That is, a single common specification for the documentation of each
   function.

   I like having this placed in the header file, because it makes sense to go
   with the header file. If you change the header, you should change the
   documentation.

   This suggests I'll want a tool which reads the header file and extracts the
   documentation. Then generates the man file or the texinfo, or input texinfo
   files. This is what we currently have.

   The question is:
   * how to invoke this preprocessor from automake.
   * what the preprocessor should look like in order to be nicely portable
   * what the preprocessor should generate for the man and texinfo files.



* Figure out how to have boxer include consoler.h?
   I would like to include it as #include <consoler.h>
   I see no special INCLUDES thing in automake.
   So perhaps just use CPPFLAGS with -I../consoler

   Yup. That works fine.

* Figure out how to do the boxertest, which needs boxer to work.
   We could assume boxer is in the current directory?
   Doesn't that seem reasonable to you?

* Start flushing out the rest of the components.

Fri May 23 16:12:54 EDT 2014

Next question: How to find the include directory for freetype?
And also ensure freetype2 is installed?

I should be able to do a pkg-config check.

Fri May 23 19:17:40 EDT 2014

Questions:
 * how to build documentation?
 * for filler: how to find tcl.h?
 * what about all those posix things I use in green and such?
   Shouldn't we have checks for them?
 * how to conditionally build components that have dependencies I may not
   want?
 * how to output a nice summary of what will be built (once we support
   conditionally building things
 * is there a problem with dependency tracking?
    - I changed pdfertest.c, but it didn't recompile it. Why?
      It's like all my nightmares from make all over again.

I don't like how every command is built by linking against every library.
Shouldn't it be per command?



Thu Jul 17 19:53:57 EDT 2014

Task: add support for standard configure script

The way I see it, the goal of configure is to determine the following:
* Where to install (prefix)
* What environment to use (PATH, etc...)
* Where to find libraries (FOO_CFLAGS, FOO_LIBS)
* What components to build

I. How to specify each
prefix - user sets by flag.
path - user sets env vars
libraries - user sets explicitly
components - flag

II. What default values to use if the user sets nothing
prefix - /usr/local
path - /bin:/usr/bin, or some such
libraries - Try package config. If that doesn't work, assume standard.
components - enable all

So it's just a matter of writing a script to provide the interface, and generaing
config.tcl.

Some other thoughts:

On ensuring build will work
---------------------------
The only way to know for sure is to try it.
I hate wasting time testing things ahead of time the way autotools does.
But, we could imagine the developer knows what things it would be good to
test, then just make that part of the early part of the build script.

On ensuring configure is run
----------------------------
Either check config.tcl is set, don't require configure is run, don't generate
a makefile until configure is run, or something.

I think the next step is to read about the standard for configure scripts.

Sat Jul 19 20:06:48 EDT 2014

The goal of configure should be to generate configure.tcl.
Or, perhaps I should call it configure.status?

Anyway, configure will be a tcl script, and it will generate a configure
script with the configuration.

The first goal I should have is:

Arguments: --prefix= --help
Builds all components.
Uses pkgconfig to figure out what it needs to about libraries.
Don't worry about PATH things for now. Just inherit it from the environment.
I can deal with that later.

This should be simple.

It is worth reading about configure.status to see if it would be the
appropriate name to generate, and what else it should contain if so.

Well, first note about the standard: gnu says it should be a shell script.

That wouldn't be so hard if I were much more fluent in shell scripting than I
am. For now, it's okay with me if I use a tcl script.

Notes:
* have a comment at the top saying config.tcl was auto generated
* config.status is just a shell script recording the command line arguments
  It does not record the results of configuration. (I can try checking this)

So I looked at config.status for grep. It... does a bunch of stuff.

Anyway, the takeaway is ... I don't need to worry about config.status yet.
So my task is simple.

Let's give it a try, and see if it works.

First step: parsing of command line arguments.

If --help was passed, print help screen and exit.
Otherwise, print prefix in use, which defaults to /usr/local.

And then, I suppose, I could just run pkgconfig for each of the rest, and
print out the values.

Sat Jul 19 21:40:31 EDT 2014

Cool! It works. Nifty.

Now it's just grunt work to add more features.
Let me create individual tasks for that.


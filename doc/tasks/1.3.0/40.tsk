
Fri Jul  1 15:52:41 EDT 2011

Task: General purpose image viewer

I need a gif viewer.

Why don't I instead just expand pnger to be a general purpose image viewer?

Any (raster) image viewer will have the same interface, right? I could have an
image viewer library or... I don't know.

Or maybe just a gif viewer.

Mon Sep  5 20:03:36 EDT 2011

I wrote a jpeg viewer, it's basically a copy of pnger. I think a single
general purpose raster image viewer would be appropriate. You give it a file,
it loads the file to a display, then you can view it that way.

What my jpeg viewer needs, and probably the other viewers too, is a way to
view all of images which don't fit in a window. Either by letting you scroll
the image, or by letting you zoom in and zoom out.

I think a good thing to do would be to consolidate jpeger and pnger, add this
scroll or zooming capability as seems appropriate, and call that a happy task
done.

Sun Sep 11 10:10:34 EDT 2011

Yes, decision is, for release 1.2.0, make a single raster image viewer which
can view png and jpeg and has support for scrolling. Don't worry about zoom
yet, that can be added to a later release.

Thu Dec 22 15:08:54 EST 2011

I added zoom and scroll support to pnger (68.tsk). It's nifty. So I may as
well keep this support for my general image viewer when I merge them.

Thu Dec 22 17:44:25 EST 2011

Is it time to merge them, you think? 

Perhaps first should be to unify them. The idea is simple: we load the raster
image into a common format: 2d array of CNSL_Color with width and height. Then
for displaying, viewing, etc... that can all share common code. The trick is,
at start up, to just choose the right load function.

Yes, that sounds good. So what I should do first will be to change pnger to
load to this 2D CNSL_Color. Then maybe massage pnger into the raster image
viewer.

Okay, here I go with the first step.

Thu Dec 22 18:04:25 EST 2011

Cool, so here's the deal. The representation for a raster image internally is
just a CNSL_Display. So all we need is for each specific kind of image to be
loadable into a CNSL_Display, and the viewer can work on any CNSL_Display.

Next step then, I think is fairly clear. Separate out things into:
  pnger.h, pnger.c - loading of a png file
  jpger.h, jpger.c - loading of a jpeg file
  imager.h, imager.c - the object for dealing with images
  imagermain.h, imagermain.c - main function, takes flag -jpeg or -png, etc...

So I'll immediately get resizing of jpeg images. Then implement loading of a
gif image, and from there I can just add formats as desired.


Thu Dec 22 18:30:08 EST 2011

Okay, last step here is to change pnger program to imager and start using
imager, and rewrite the docs, and add the jpeg format to imager.

Let me start by porting jpeger to the imager directory.

Sat Dec 24 18:04:51 EST 2011

I ported jpeger over. The next step is, I think, to make just one imager
application capable of viewing jpegs, pngs, whatever I add. There's no reason
to need multiple different applications, with multiple main files, and
multiple documentations all for what's essentially the same thing.

The only reason would be if you wanted to have a png viewer, for example,
without having the jpeg library installed, but... I don't want to deal with
that for now.

The question is, how should it work? To start, I think you should specify what
type of image file it is. How do you do that? I have a couple of ideas.

* have flags:
    -jpeg, -png, etc...
* have a flag:
    -t jpeg
    -t png
    etc...

I think the later makes more sense, even if it is a little more work to parse.

Sun Dec 25 12:52:40 EST 2011

Okay, so let me implement it, clean things up, and so on.

Sun Dec 25 13:30:08 EST 2011

I implemented it. So, guess what? I would say this task is done!

Even though I haven't implemented the gif yet. That can be a different task.



Sat Mar 26 13:06:17 EDT 2011

Task: Make green application: a graphical version of screen.

See thoughts/03_26_11.txt for initial plan.

I think I should break it up into two separate components: the client and the
server.

The green client is the way you can connect to an existing green session. For
example: 
    cgreen pnger foo.png

will connect to the existing green server and open up a new window with the
pnger client.

The server is just the server.
    sgreen

Later on we can trivially make it a single application by checking for an
existing server, and based on the result either exec cgreen or sgreen. Or
something like that.

For now, let's say the server runs forever. I can worry about closing the
server later.

Let's say we use /tmp/green as the socket for the server. Obviously that can
change to something more sensical later on.

The client's job is easy. All it has to do is tell the server what program to
run. So have it connect to the server via the /tmp/green socket. If it can't
connect bail. If it can send info in the following format over the socket:

uint32: number of arguments
uint32: arg 1 length
uint8*N: arg 1 data
uint32: arg 2 length
uint8*N: arg 2 data
...

Once it's sent, the client can close again.


The server I plan to make multithreaded (against my better judgement, becuase
that's how ideally it would be if multithreaded weren't such a pain).

It has one thread listening for new clients. The thread parse the program to
run, then spawns a new thread to run the client. This thread runs forever.

For each client it has a thread which listens for updates from the client,
copies those updates into the appropriate buffer. If the client is the current
window, it updates the display too.

Input is checked for control sequences for switching windows (on yet another
thread). If not part of the control sequence the input is passed to the
current client.

To switch clients, we simply update the display from the new client buffer and
set him as the current.

When a client finishes, we clean up and revert to some notion of a previous
client. Maybe to keep it simple we start with a maximum 10 clients (0-9). I
don't think I've ever used that many in screen before, and we can expand it
later. So have a list of which clients ids are in use and which not.

It all seems pretty clear to me.

Here's my plan for the implementation:

1. Start by getting the server/client thing going.
So for the first milestone, the server sets up the socket, in an infinite loop
collects and prints out the clients request to stdout. No graphical stuff yet.
With this we can implement the client and make sure it works.

2. Add the graphical stuff.

What do you say? Shall I get started?

I think so. I'll let you know what goes wrong.

Sat Mar 26 13:40:53 EDT 2011

Number (1) went surprisingly well.
Now for (2).

Let's see how far I can get.

Sat Mar 26 13:59:08 EDT 2011

Here's the issues I ran into:

1. I don't have a way to check for modifiers, so my original plan of ctrl-'
for a control sequence won't work until I have that. As a fine temporary
solution i've decided just to interpret the function keys F0-F9 as switch to
that window (if possible).

2. I need a way to forward an event to the client.
This should be part of a csr kind of library I'm sure. And what is now csr
should instead be called sdlcsr or some such.

3. I'll probably also want in the csr library a way to update a buffer from a
child process I've started. And it would be nice to have a nice way of
spawning the child process (via fork, etc...).

So, not major issues. Just enough to make me finally want to get lunch (even
if nothing looks so appealing).

Sun Mar 27 11:06:44 EDT 2011

So, I pulled console server routines out into csr library, and I finished a
rough draft of the sgreen implementation.

Unfortunately, it doesn't work.

The behavior I'm seeing is:

The new client is immedidately getting end of file on input events.
So the client exits right away.

Then, for some reason, the server stops running (when I expect it to keep
running).

I fear the problem may have something to do with mixing pthreads and fork. I
don't know. Not sure how to proceed on this.

Sun Apr  3 09:21:56 EDT 2011

I tried moving serveclients to the main thread, it didn't help.

Hmm...

Let me try simplifying first.

I don't believe the issue is with cgreen connecting. So let me get rid of the
whole cgreen thing, and just spawn two boxer processes manually.

Sun Apr  3 09:33:09 EDT 2011

Yup. Even just spawning the processes manually doesn't work.
Odd. It works in sdlcsr right?

What's the difference?

I wonder if what was happening was the server was exiting when it shouldn't
have? Err... That doesn't quite fit.

Anyway, when I moved handle_input into the main thread after the serveclients
function we suddenly got something different: bad address for execv. hmm..

Um. It's working now with the one client. Though output seems to lag a key
press. Let me not worry about that.

I switched back to using cgreen, and now it works. I have no idea what
changed...

I guess I must have had a bug, and we were dereferencing a bad pointer or
something like that. I don't know. It just doesn't make sense to me.

But that problem seems to be gone, so I can focus on the rest of the problems.

Okay, now I'm worried. Because there literally has been no change from before.
Why did it start working?

Oh. It was the assignment of vid. Before that something was crashing the
server, only I didn't see the segfault. I get it. Phew!


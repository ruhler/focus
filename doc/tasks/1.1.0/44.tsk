
Sat Jul  9 16:13:03 EDT 2011

Task: Add support for Resize to all apps

To make screen split work, we need apps to support resize. Specifically it
would be good if termer and pdfer supported resize. Ideally I can mark
CNSL_GetGeometry and CNSL_SetGeometry as depricated and not use them anywhere.

Sun Jul 17 12:59:42 EDT 2011

Here is the current status for each application.

boxer:: uses GetGeometry and SetGeometry. Needs update to resize.
filler:: uses resize, so this is all set.
sgreen:: uses GetGeometry and SetGeometry. Needs update to resize.
pdfer:: uses GetGeometry and SetGeometry. Needs update to resize.
pnger:: uses nothing. Can continue to use nothing.
termer:: uses GetGeometry and SetGeometry. Needs update to reize.

So the following need update: boxer, sgreen, pdfer, termer.

Let me lay down my thoughts on what each of these will involve, and maybe I
can start to make some forward progress.

- Boxer
    The dimenions are used to know when to wrap the box around to the other
    side of the screen. The question is, what behavior do we want?

Have I said this yet? I'm not so happy how complicated this resize thing makes
things. It's perhaps worth reminding myself why I'm doing it.

There is one reason, and one reason only, I expect to use resizing: splitting
in sgreen. More specifically, splitting between a termer and a pdfer is really
the only thing I imagine right now.

termer has to know about the screen resize, so things like vim can work at the
resized screen. pdfer should know too.

But gah! Wouldn't it be nice if my applications didn't have to know about
resize? I think I have had all of these discussions before though. Let me find
my thoughts then, and see what my conclusions were. I have an idea...

Sun Jul 17 13:23:48 EDT 2011

I reread my previous thoughts on splitting. The key idea was that if an
application is interested in the initial screen size, it should be interested
in resizes too. So boxer should be interested in resizes.

I must say, I'm worried about all this split and resize stuff. It's all so
complicated! And all for just a tiny (albiet very important) use case.

I'm thinking it's worth exploring more alternatives to the whole split resize
thing.

Is there a way I can have the split functionality I need without having any
resize? The functionality I need is: ability to read from one client while
keyboard focus is on another client. And hopefully I can see parts of both
clients at the same time.

An assumption I've been making is to be effective the clients should know what
their screen size is. For example, if you are using vim in one of the clients
which is split, you want to be able to see what's going on? Maybe that
assumption isn't so important.

Let me throw out some ideas.
A. Have sgreen implement split with scrolling via it's modality. Clients don't
have to know about resize, you can position the windows where you want.
Scrolling will have to be based on absolute pixels, or it can be based on the
view size, that's not bad.

So if I'm using pdfer and I want to scroll down or up, well, that's not any
problem, because pdfer can already do that. If I'm using vim and I want to
scroll down or up, for the most part that isn't a problem. Only when we are at
the top or the bottom of the file is that a problem, in which case I can do
the sgreen scroll to see what I want.

B. I was going to say maybe you can wire things so the top window of a split
always shows the top half of its client and the bottom window of a split
always shows the bottom half of its client. That seems a little wierd though.

Sigh. Here's what I'm seeing right now. I've launched this big sequence of
changes to allow for resizing to satisfy my split requirement. I'm in the
middle of those changes and I find there is a lot I don't like. Mostly I don't
like the complexity introduced by dynamic resizing of applications.

Now I have an alternative proposal to the whole thing which sounds like it
would be functionaly acceptable (though perhaps slightly annoying) and save us
almost all the complexity introduced by resizing. That is, the complexity is
concentrated into sgreen, which seems appropriate. Additionally, with this
alternative solution, you get other benefits like pnger being more usable (if
sgreen uses first display update to figure out the display dimensions).

I don't know. I'll have to stew a bit more on this.

Sun Jul 17 13:55:01 EDT 2011

Here's an idea. The problem with resizing is the introduced complexity in the
clients that support it, right? Maybe the real problem is I'm trying to have
one interface which works for all clients. But perhaps different clients need
different interfaces. I always say you should use the right interface for what
you need, then translate to other interfaces separately. Maybe what's wrong
with X, and what's so complicated about it, is it tries to support anything
any client may want to do with a single interface, so even if your client
doesn't want to do a bunch of stuff, it still has to know about that to use
the interface.

An alternative would be we could have lots of different interfaces. The client
can choose exactly that interface he wants to use, then we provided adaptors
to go between the interface.

For example, terminal applicaitions like bash, screen, readline, vim, etc...
all use a terminal interface. Some applications may not care about screen
resizing and stuff, so they don't need to use a complex interface for
resizing, like pnger. Others you may want resizing for, such as termer and
maybe pdfer (though I think part of my complaint is having to implement
resizing in those applications).

Then you have converters. termer converts terminal applications to the
consoler application interface. Maybe you have a resizable application which
converts those who don't care about resize to those who do care about resize.

hmm...

Mon Jul 18 23:31:54 EDT 2011

I've thought some more about this. I don't know why it's so hard. I'm not
convinced any way, but right now I'm leaning towards: just implement the
resize capability. You know there will be other times you want it, and it
really won't be so hard to implement as you fear, and it makes sense to have.
Having multiple different kinds of interfaces which are close but different
will just be way more confusing.

Perhaps the real problem I'm facing is what to do with boxer. What should
happen if you resize it? Should it be a resizeable application?

Well, I suppose there are a limited number of rational behaviors. Let me list
them.

A. blank the screen, reinitialize.
B. blank the screen, map box location to new size.
C. blank anything outside the new screen, remap box location
D. remap the box location, keep everything else as it was.
E. Rewrite the box game and how it behaves when you go off screen:
  Instead of wrapping around to the top, scroll the screen automatically to
  fit the box. Then all you do when you resize is shrink the screen and
  position it over the box. You get to retain all the drawing you have done so
  far.

Think about that some. Maybe the real takeaway here is not to start with
boxer. Start with pdfer.

Thu Jul 21 22:28:21 EDT 2011

Here I go with pdfer. I think it should be pretty easy. I'll let you know what
problems I run into.
 
Thu Jul 21 22:37:36 EDT 2011

Yup! It was really easy to implement. Cool. Next on to termer I suppose.

Thu Jul 21 22:38:56 EDT 2011

Okay, cool. So I've almost got split to be useful. I just need termer to be
resizable.

Now this is going to be a bit more work than pdfer was.

I need to add a resize function to the screen. Not sure what it does to the
characters already there. It could... I suppose the obvious thing to do is any
character that still fits in the screen stays, all the others go.

We'll probably want to redisplay the entire screen. That shouldn't be too
hard.

Then the thing I need to figure out is how to tell the terminal client that
the screen size changed. Is it this WINCH signal? Whatever screen does when it
splits. Or whatever xterm does when you resize it. There must be a pretty
standard way of doing this sort of thing.

Time for research.

SIGWINCH    28,28,20    Ign     Window resize signal (4.3BSD, Sun)

It certainly looks like this is the way to go. But how does it work? Somehow I
need to tell the client what the new dimensions are, right?

Let me look into the screen source code, see if I can find anything.

Thu Jul 21 23:04:44 EDT 2011

Can't find much in screen.

Is there an ioctl for it? Maybe: TIOCGWINSZ?

Then maybe what I do is use an ioctl to set the window size, then send the
signal to the child, and the child will use the ioctl to read the window size?
Let me see if I can figure out anything more.

Yes, it looks like maybe this is the way to go. Or TIOCGSIZE.

Perhaps also, though, there is some terminfo entry for it that I didn't come
across in the terminfo man page?

Like: u6 = \E[%i%d,%dR (report)
      u7 = \E[6n (request)

Can I do stuff with stty?

`stty size` prints the size according to the kernel.

Looks like size information can be passed via kernel (TIOCGSIZE or TIOCGWINSZ)
or via environment (LINES or COLUMNS). The environment doesn't support dynamic
resize (sound familiar?).

I need to do a little bit of research. Try writing a simple program to change
the terminal size using TIOCG... Run it, verify it changes `stty size`, then
experiment with screen and changine LINES and COLUMNs and stuff like that
until I can figure out the proper method for resizing a terminal. I'm
currently thinking the way to do it is: use ioctl to set size and send a
SIGWINCH signal to the child. Or is SIGWINCH sent automatically? Something to
play with.

Sat Jul 23 16:59:25 EDT 2011

What is the first experiment I should run?

Write a program to change the screen size using TIOCGSIZE. Run it on whatever
terminal screen is running on, and see if it works.

Well, that's not good enough, because what does it mean for it to work?

How about this. We think screen uses LINES and COLUMNS environment variables
when it starts. The question is, how do we know how big screen thinks it is?
What does it do differently? Like what if I told it to resize to a 80,12 sized
window?

Some ideas:
1. ctrl-a i  gives the size screen thinks it is.
2. let's change LINES and COLS and see what screen does different appearance
wise. I can do this now.

Oh. That's nice. The status bar is shown where you would expect for the small
size, and vim works in the small size. Some other things (like pressing enter
a lot) don't work as you would hope.

In other words, it's pretty clear when screen thinks it is a different size.

So I can do this experiment. Write a simple program to change the terminal
size using TIOCGSIZE, run it, see if screen actually changes size.

I might also note, inside screen after changing LINES before boot, stty size
prints the smaller size.

Cool. Here I go then.

Sat Jul 23 17:30:36 EDT 2011

I used TIOCSWINSZ, and it looks like it could work if I get the right file
descriptor to do the ioctl on. We have the right file descriptor in ctermer,
it's called tcfd.

Well then. What's left to do? Try it out? Write a rough draft and see how it
goes?

Let me scope out the information flow.

Here's the use case:
  the consoler server sends us a resize event
  we resize the screen object, resize the terminal file descriptor,
  and maybe we redisplay something.

Flow is: 
  inputter calls getevent, which does the recv event.
  if inputter gets the event, that isn't really useful, because it doesn't
  know about any of the things it needs to do the resize.

  I propose we have ctermer watch for the resize event and deal with it
  separately, and never even tell the inputter about it.

  Now ctermer gets the resize event, it has access to everything it needs to
  calculate a new terminal size and send the ioctl.

  What ctermer doesn't have access to is the screen object to tell it about
  the resize.

So this resize thing violates the intended design of termer. That is, normally
input goes from consoler to inputter to client to screen to consoler. But now
I'm asking to go from consoler to screen and other stuff to consoler.o

Do you think it makes any sense to redesign the way termer works? It's gotten
pretty messy the way we decomposed it from when it was a haskell program. Let
me think about it some and get back to you.

Sat Jul 23 19:33:31 EDT 2011

Here's the first problem. The screen is in termer.c, the resize comes to
ctermer.c. That could be solved, perhaps, by first cleaning up the termer
implementation (merge stuff from ctermer.c into termer.c for example).

Here's the second problem. The resize event comes from the console server and
has to change the screen. But the screen is also, perhaps currently, being
updated by the terminal client. That means we need mutual exclusion. A lock.
Yuck.

So there's not nice easy pleasent way to do it all.

Looking at ctermer.c and termer.c, I think these can be merged into one file
(termer.c) in a much nicer way. It really is a very funny decomposition the
way it is now. Then add snooping of the resize events, and a lock on screen.
Implement a screen_resize function, and that's pretty much it. Doable. Not as
clean as I would like it, but I guess that's just the way things are.

Sat Jul 23 20:14:24 EDT 2011

Okay, first step is to clean up termer. I want to merge termer.c and
ctermer.c. Should this get its own task? Sure. 50.tsk.

Sun Jul 24 00:25:40 EDT 2011

50.tsk is done. Now back to the resize question. I think I'm closer now. It's
relatively simple right?

- implement client resize 
   does the ioctl on the terminal client file descriptor to set the new window
   size.

- implement screen resize
   reallocates the character display to the new size.

- implement display resize
   resets boundaries and updates lines and columns or some such.

After all that's done we need to add the screen lock (which is really annoying
to me), and call everything.

Screen lock will be... troublesome. Because outputter calls the screen
functions directly, it doesn't know about locking. I would have to change
every call. Or change every call in screen itself.

Maybe there's an easier way. Maybe outputter itself can check for a resize?
But can a resize come in the middle of an output and would waiting be bad? Is
that something to worry about?

I don't know. That's too hard a question to think about right now. I'll sleep
on it and get back to you.

In the meantime, I can write down rough drafts for all the resize and maybe
that will be useful?

Sun Jul 24 00:48:05 EDT 2011

Wrote rough drafts for client and display. Next for screen... though this
touches on the race condition issue. I suppose it's still worth writing down
the core logic.

Sun Jul 24 00:51:49 EDT 2011

Question. What do I do with the cursor if we are resizing it out of where it
used to be? Can I just move it? Is that allowed? Can I keep it where it is? Is
that allowed? Maybe I can move it to where it is and it will go to where it
should be? Yes! I like that idea.

Okay, it's done. Rough draft of code written for screen now too. The rest of
the task is to figure out locking and call the resize functions (and obviously
I'll need to debug them too).

Sun Jul 24 16:52:18 EDT 2011

Okay! I think I've worked out the screen lock issue.

We do the resizing all from the outputter thread. This way there is no current
conflict over the screen, so I don't have to put the lock on the screen.
Instead I'll put a lock on a flag which says if we should resize or not, and
I'll have the outputter read that just before it updates the display.

This should be a very easy thing to implement now, so let me try it.

Sun Jul 24 17:03:34 EDT 2011

I wrote the code for resize, all that remains now is to try it out.

Sun Jul 24 17:09:16 EDT 2011

It works! Wow. Cool. Who would have thought?

Let me just get rid of the printfs from previous debugging and I'll check it
in. I'm not going to figure out how to test this automatically (sorry).

Sun Jul 24 17:14:26 EDT 2011

Well now. All the hard parts done (right?). What, if anything, still uses the
CNSL_GetGeometry function?

Err... I had a problem when I tried out split with pdfer and termer. The
termer seemed to crash or something.

Yup. I'll open a  new task to deal with that (51.tsk).

Anyway, users of CNSL_GetGeometry remaining are:
  boxer, fonterexample, sgreen.

Sun Jul 31 19:47:18 EDT 2011

For the sake of progress, there's a really easy way to switch from
CNSL_GetGeometry to Resize. Just don't support dynamic resize events. Simple.
Let me do that.

Sun Jul 31 19:55:34 EDT 2011

Done. I'll just depricate GetGeometry and SetGeometry and call it a done task.

Done.


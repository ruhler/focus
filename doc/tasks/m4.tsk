
Sun May 22 15:42:02 EDT 2011

Task: I need a milestone 4.

I'm not sure what it should be yet. I'm thinking maybe it should just be:
start using focus wherever I can. Make the default. Fix all the little odds
and ends that come up.

Things like:
 + pdfer should have a goto command
    How about this: have digits accumulate into a number.
                    Then g will goto whatever number you specify.
    It's very simple, and should work, right? Let me try it.
    It works!
 + pdfer has a bug: fit width doesn't work right.
    Or maybe it was a problem with loading the right library?
    No, it was that the y position changed at zoom.
 + pdfer fitwidth doesn't keep part of page at the top in the same place.
    So in some cases, it moves the page totally out of view, which is
    annoying. I suggest what we want is to zoom around the top of the page. So
    whatever pixels are at the top of the page before fitting to the width
    should remain at the top of the page after fitting to the width.

    How can I test this? Use a solid color pdf. We know the background color.
    Position the page so that row 2 is background color, row 4 is page color.
    Then fit width, verify row 2 is background color, row 4 is page color?
    Hmm... Not sure how to test this.

    I fixed the problem without testing. GAR! What a waste! Why didn't I write
    a test case for this?

    Maybe a test case could be: fit all (so top of page is at the top), fit
    width (top of page should still be at the top), scroll down 10%, now the
    top of the page should have changed. Verify it changed color.
 + cgreen should pass along current working directory to sgreen?
    (green_cwdbug.tsk)
    
 - It might be nice to have a library for drawing a status bar (statusbar.tsk)
 - pdfer should have a way to show the number of pages in the document (pdferinfo.tsk)
 - pdfer should have a way to show the number of the current page (pdferinfo.tsk)
 - I can't launch pdfer from within elinks. The screen freezes up (pdferfromelinks.tsk)
 - sgreen should blank a clients display when it quits so we don't see it when
   we start a new client with the same id. (sgreenblank.tsk)

 - pdfer needs a search capability

 - on losaltos, touching the touchpad appears to crash sdlcsr (and then we
   strand all the clients running at like full cpu).
 - When sdlcsr is running and we shutdown the computer, /tmp/green gets left
   stranded.
 - figure out how to make a clean termination of clients
 - turn consoler into a library
 - consoler man page(s)
 - pdfer man page
 - pnger man page
 - termer man page
 - sgreen man page
 
 - filler should use the whole screen (and remember to update the man page)
 - ditto with boxer: it should use the whole screen.

 - sgreen maybe should have a split feature
    For this to work, I'll probably want a resize event.
    Other than that, I don't think it will be too hard. I just need to add
    state which is: how the screen is split, which client is in each window,
    and which window has input focus. When I receive output from a client,
    update each window which is showing that client.

 - sgreen leaves /tmp/green stranded when we shutdown.

 - some unicode characters don't work
    Like for drawing boxes and such (try alsamixer for example).
    But it's very strange, because if I start a new termer, it works fine, but
    the original one launched from sgreen doesn't? What's with that?

    Oh, it's that, in screen it doesn't work, not in screen it does.
    When it doesn't work, we have characters such as: ─(2500) and ┘(2518).
    Now I have something I can work with. Question is, where do I get these
    from? What font has them, and how should I know to load the font?

    I notice the following:
    1. fontconfig has a way to match based on charset, so I suppose, in
    theory, if I find a character not in my font, I can match another font
    that has it.
    2. The non-bold versions of my Dejavu font do define those box drawing
    characters.

    So here's what I think I should do. Update fontconfiger to search for
    character 2500 and see what it returns. If it works usefully, then do as
    proposed in (1). Have a bunch of faces loaded, and try them all before
    giving up? Or something like that.

 - termer implement underline, italics
    I might note, the font I use has an italics version. So maybe we could do
    italics by choosing an appropriate font. Underline should be easy: just
    draw the line manually.
    
    An easy way to test this use running `man man`. Because there is lots of
    italics there, and it looks much better if the italics doesn't look the
    same as bold.

    I wonder if implementing underline will cause screen to generate italics
    is underline?
    
 - what if sgreen can't find 'termer' in path?
 - sgreen has no way to view the active windows
    Either we show a status bar like thing, or we have a special command that
    can be called from the terminal to list what's going on for us. Or both.

    I think something like screen's status bar would be nicer. That way, for
    example, I don't have to open a new termer window if I don't have any to
    see what all windows are where. If I don't want a status bar, this depends
    on the status bar task, so I should do that one first.
 - termer doesn't handle everything elinks (not under screen) spits at it
 - termer support for mode sequences with more than 2 parameters
 - sgreen should add a way to kill windows

 - How about a library for key mappings?  (kmapper.tsk)

 - is LaunchClient a memory leak? Or just in sgreen where I never free it?
    It looks okay, but I'm thinking, why do we need to malloc for the Client?
    Isn't client simple enough to be passed around as copies?

    The challenge then is, how do we differentiate in LaunchClient between a
    good and bad client? Well, the answer would be return the client as an out
    arg and have an error code to return.

    Same thing maybe for display.

 - sgreen/cgreen should be reentrant. That is, allow sgreen within sgreen.
    cgreen can already support it via this CNSLSVR environment variable. What
    i suggest is sgreen when it starts should choose as the socket name
    /tmp/green-<pid>. Or maybe we should use /var for that? Then set CNSLSVR
    to the right value.
    
 - use buffered io for passing events? May help noticable performance issue?
    The issue being: it takes a long time before keyrepeat kicks in, then in
    kicks in hard. But then, maybe this is more a problem with the chosen key
    repeat parameters. Or maybe this is more a problem with scrolling the
    display.
 - profile termer and make it more efficient (save battery life)
    It's really not clear this is of any value unless I profile the power
    efficiency of my whole computer.
 - make a nice installer
 - rewrite sgreen to be better
 - implement a remote client server
 - termer support of dynamic font resizing?
 - tk server
 - gtk server?




Wed Jun  1 11:00:53 EDT 2011

I've decided on a milestone 4. Milestone 4: prepare focus for release. This
doesn't mean I actually have to release it, but it should be in releasable
form (I shouldn't be embarrassed if others could easily download and try it).

Now, here's how this will work. I have the above list of issues. I will sort
that last in some priority order, and I will go through the list and solve
each issue. More issues may arise, that's okay, they will be added to the
list.

I can change the priority of items in the list, but try to do the top priority
item without switching it back and forth with some other item, because then I
may get nowhere. That is, before decrementing the top priority item's
priority, I should put serious effort in advancing that item's progress.

I expect I'll also need a way to boot issues to later milestones. So that's
okay, but once it's booted, it should probably stay at the later milestone.
Again, the goal is to avoid thrashing back and forth doing nothing (like I
have been for the last week).

Each of these items should really get it's own tsk. That way we can track when
new thoughts were added and what not to them. I can log here the status of the
overall milestone.

Okay? Are we agreed? Good.

I'll go sort the issues now.

All sorted. Good. I'm glad. Now it should be, hopefully, pretty clear what
I want to do next.



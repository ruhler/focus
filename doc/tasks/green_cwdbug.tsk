
Thu May 26 15:07:56 EDT 2011

Task:  cgreen should pass along current working directory to sgreen?

And the whole environment, which is a pain.
I think what this means is I should figure out how to have cgreen do the
exec call instead of sgreen. It's either that, or pass along the entire
environment, which is annoying.

Perhaps cgreen can create a named pipe or two, exec the client
application, and send a note to sgreen which is just the name of the pipe.
Then sgreen can connect to the pipe and unlink (so the file goes away).

Oh and hey! This will help with stdout. Now stdout will go to stdout of
cgreen, not sgreen, which is what we really want.

This would definately be worth fixing, because this is the biggest pain
currently with using green.

So how will it really work? cgreen makes a named pipe. cgreen sends to
sgreen the name of the pipe. cgreen makes the named pipe the stdconsole,
then execs the client.

Another option would be for cgreen to fork the client and just exit. This
way cgreen would finish. That, I think, makes more sense from the user's
perspective. cgreen launches an application, not becomes one. It's just a
little annoying I can't resuse the LaunchClient function from the consoler
library.

Okay, here's the plan: cgreen makes a named pipe under some mktemp like
name, forks the console client (using code just like the LaunchClient
implementation in consoler), sends the name of pipe to the server, then
closes its end of the pipe and exits. The serve will be listening, get the
name of the pipe, open it, then unlink the pipe so it goes away from the
file system, and continue normally from there.

One question: is there a race condition? The client will try to read and
write to its end of the possibly before the server has opened it.

Opening the pipe blocks until the other end has opened it too, so that
shouldn't be a problem. Just open the pipe after the fork rather than
before the fork...

Um concern. What if the client fails somehow, then the server will try to
open this pipe, no one will be on the other end, and the server will get
stuck. Maybe that's not a problem. Let me worry about it and deal with it
when it becomes a problem. Okay? Here I go.

Problem: Now how do I launch termer?
Okay, so for termer I do the same as before: fork locally.
Now it compiles, the annoyance is green is not reentrant, so I can't test
it from my existing sgreen. How terribly annoying.

Well, it sort of works. Sometimes trying to open a pdf is problematic. I
suspect what happens is the client closes the pipes before the server
opens them, so the server waits for a long time, which is bad. Yuck.

Like I said, I need to rewrite sgreen anyway, maybe figure out how to do
everything right and fix it then.

I know! Let me look at how screen does all this. It will at least be
interesting.

Looking at screen... I can't tell. The code is a big mess. What I should
do, maybe, is try coming up with some abstractions.

Thu May 26 15:05:53 EDT 2011

This is silly. The answer is obvious. I don't know why I didn't see it.

sgreen is listening on a socket. So client programs should just connect on
that socket (as sgreen already does). Now use that socket connection for the
communication between client and server. Simple. Easy. No problems with races
or temporary files or anything like that.

Here's how it should work.

cgreen:
1. connect to server (read environment var or something to figure out what path to use).
2. dup the socket fd over to STDIN and STDOUT.
3. Exec the client program.

sgreen;
In a loop:
 1. accept a connection
 2. make a client struct for it from the connected fd.

That's it.

I think sgreen can have a function new_client which takes as input the file
descriptors for read and write. I think in consoler Client should not be a
pointer, just make it a struct. That will ease memory stuff. Or something.

So let me save my latest work, then throw it away and make things better.

